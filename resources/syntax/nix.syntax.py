# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: nix.js
name = 'Nix'
file_patterns = ['*.nix', '*.nixos']

built_in = [
    'import',
    'abort',
    'baseNameOf',
    'dirOf',
    'isNull',
    'builtins',
    'map',
    'removeAttrs',
    'throw',
    'toString',
    'derivation',
]

keyword = ['rec', 'with', 'let', 'in', 'inherit', 'assert', 'if', 'else', 'then']

literal = ['true', 'false', 'or', 'and', 'null']

number = [RE(r"\b\d+(\.\d+)?")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

class subst:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
    ]

class string:
    default_text = DELIMITER
    rules = [('subst', RE(r"\$\{"), [RE(r"}")], subst)]

attr = [RE(r"\S+")]

class _group0:
    default_text = DELIMITER
    rules = [('attr', attr)]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('number', number),
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('string', RE(r"''"), [RE(r"''")], string),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('_group0', RE(r"(?=[a-zA-Z0-9-_]+(\s*=))"), [RE(r"\B|\b")], _group0),
]

subst.rules.extend(rules)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
