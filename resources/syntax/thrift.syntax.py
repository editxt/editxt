# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: thrift.js
name = 'Thrift'
file_patterns = ['*.thrift']

built_in = ['bool', 'byte', 'i16', 'i32', 'i64', 'double', 'string', 'binary']

keyword = [
    'namespace',
    'const',
    'typedef',
    'struct',
    'enum',
    'service',
    'exception',
    'void',
    'oneway',
    'set',
    'list',
    'map',
    'required',
    'optional',
]

literal = ['true', 'false']

number = [RE(r"\b\d+(\.\d+)?")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

keyword0 = ['struct', 'enum', 'service', 'exception']

class title:
    default_text = DELIMITER
    rules = [('title', RE(r"[a-zA-Z]\w*"), [RE(r"\B|\b")])]

class _group1:
    default_text = DELIMITER
    rules = []

class class0:
    default_text = DELIMITER
    rules = [('keyword', keyword0), ('title', title, [RE(r"(?=\{)")], _group1)]
class0.__name__ = 'class'

class _group2:
    default_text = DELIMITER
    rules = [('keyword', built_in)]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('number', number),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('class', RE(r"\b(struct|enum|service|exception)"), [RE(r"\{")], class0),
    ('_group2', RE(r"\b(set|list|map)\s*<"), [RE(r">")], _group2),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
