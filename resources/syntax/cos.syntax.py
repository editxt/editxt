# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: cos.js
name = 'Cach√© Object Script'
file_patterns = ['*.cos', '*.cos', '*.cls']

flags = re.IGNORECASE | re.MULTILINE

keyword = [
    'break',
    'catch',
    'close',
    'continue',
    'do',
    'd',
    'else',
    'elseif',
    'for',
    'goto',
    'halt',
    'hang',
    'h',
    'if',
    'job',
    'j',
    'kill',
    'k',
    'lock',
    'l',
    'merge',
    'new',
    'open',
    'quit',
    'q',
    'read',
    'r',
    'return',
    'set',
    's',
    'tcommit',
    'throw',
    'trollback',
    'try',
    'tstart',
    'use',
    'view',
    'while',
    'write',
    'w',
    'xecute',
    'x',
    'zkill',
    'znspace',
    'zn',
    'ztrap',
    'zwrite',
    'zw',
    'zzdump',
    'zzwrite',
    'print',
    'zbreak',
    'zinsert',
    'zload',
    'zprint',
    'zremove',
    'zsave',
    'zzprint',
    'mv',
    'mvcall',
    'mvcrt',
    'mvdim',
    'mvprint',
    'zquit',
    'zsync',
    'ascii',
]

number = [RE(r"\b(\d+(\.\d*)?|\.\d+)")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

built_in = [RE(r"\$\$?[a-zA-Z]+")]

keyword0 = [RE(r"\$\$\$[a-zA-Z]+")]

symbol = [RE(r"\^%?[a-zA-Z][\w]*")]

keyword1 = [RE(r"##class")]

rules = [
    ('keyword', keyword),
    ('number', number),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('built_in', built_in),
    ('keyword', keyword0),
    ('symbol', symbol),
    ('keyword', keyword1),
    ('_group1', RE(r"&sql\("), [RE(r"(?=\))")], 'sql'),
    ('_group2', RE(r"&(js|jscript|javascript)<"), [RE(r"(?=>)")], 'javascript'),
    ('_group3', RE(r"&html<\s*<"), [RE(r">\s*>")], 'xml'),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
