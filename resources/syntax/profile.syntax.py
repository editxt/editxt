# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: profile.js
name = 'Python profile'
file_patterns = ['*.profile']

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

keyword = ['ncalls', 'tottime', 'cumtime', 'filename']

class _group1:
    default_text = DELIMITER
    rules = [('keyword', keyword)]

class _group2:
    default_text = DELIMITER
    rules = [
        None,  # ('number', number),
    ]

class string:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
    ]

rules = [
    ('number', number),
    ('_group0', RE(r"[a-zA-Z_][\da-zA-Z_]+\.[\da-zA-Z_]{1,3}"), [RE(r"(?=:)")]),
    ('_group1', RE(r"(ncalls|tottime|cumtime)"), [RE(r"$")], _group1),
    ('_group2', RE(r"function calls"), [RE(r"$")], _group2),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('string', RE(r"\("), [RE(r"(?=\)$)")]),
]

_group2.rules[0] = ('number', number)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
