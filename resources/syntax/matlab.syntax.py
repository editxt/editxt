# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: matlab.js
name = 'Matlab'
file_patterns = ['*.matlab']

built_in = [
    'sin',
    'sind',
    'sinh',
    'asin',
    'asind',
    'asinh',
    'cos',
    'cosd',
    'cosh',
    'acos',
    'acosd',
    'acosh',
    'tan',
    'tand',
    'tanh',
    'atan',
    'atand',
    'atan2',
    'atanh',
    'sec',
    'secd',
    'sech',
    'asec',
    'asecd',
    'asech',
    'csc',
    'cscd',
    'csch',
    'acsc',
    'acscd',
    'acsch',
    'cot',
    'cotd',
    'coth',
    'acot',
    'acotd',
    'acoth',
    'hypot',
    'exp',
    'expm1',
    'log',
    'log1p',
    'log10',
    'log2',
    'pow2',
    'realpow',
    'reallog',
    'realsqrt',
    'sqrt',
    'nthroot',
    'nextpow2',
    'abs',
    'angle',
    'complex',
    'conj',
    'imag',
    'real',
    'unwrap',
    'isreal',
    'cplxpair',
    'fix',
    'floor',
    'ceil',
    'round',
    'mod',
    'rem',
    'sign',
    'airy',
    'besselj',
    'bessely',
    'besselh',
    'besseli',
    'besselk',
    'beta',
    'betainc',
    'betaln',
    'ellipj',
    'ellipke',
    'erf',
    'erfc',
    'erfcx',
    'erfinv',
    'expint',
    'gamma',
    'gammainc',
    'gammaln',
    'psi',
    'legendre',
    'cross',
    'dot',
    'factor',
    'isprime',
    'primes',
    'gcd',
    'lcm',
    'rat',
    'rats',
    'perms',
    'nchoosek',
    'factorial',
    'cart2sph',
    'cart2pol',
    'pol2cart',
    'sph2cart',
    'hsv2rgb',
    'rgb2hsv',
    'zeros',
    'ones',
    'eye',
    'repmat',
    'rand',
    'randn',
    'linspace',
    'logspace',
    'freqspace',
    'meshgrid',
    'accumarray',
    'size',
    'length',
    'ndims',
    'numel',
    'disp',
    'isempty',
    'isequal',
    'isequalwithequalnans',
    'cat',
    'reshape',
    'diag',
    'blkdiag',
    'tril',
    'triu',
    'fliplr',
    'flipud',
    'flipdim',
    'rot90',
    'find',
    'sub2ind',
    'ind2sub',
    'bsxfun',
    'ndgrid',
    'permute',
    'ipermute',
    'shiftdim',
    'circshift',
    'squeeze',
    'isscalar',
    'isvector',
    'ans',
    'eps',
    'realmax',
    'realmin',
    'pi',
    'i',
    'inf',
    'nan',
    'isnan',
    'isinf',
    'isfinite',
    'j',
    'why',
    'compan',
    'gallery',
    'hadamard',
    'hankel',
    'hilb',
    'invhilb',
    'magic',
    'pascal',
    'rosser',
    'toeplitz',
    'vander',
    'wilkinson',
]

keyword = [
    'break',
    'case',
    'catch',
    'classdef',
    'continue',
    'else',
    'elseif',
    'end',
    'enumerated',
    'events',
    'for',
    'function',
    'global',
    'if',
    'methods',
    'otherwise',
    'parfor',
    'persistent',
    'properties',
    'return',
    'spmd',
    'switch',
    'try',
    'while',
]

keyword0 = ['function']

title = [RE(r"[a-zA-Z_]\w*")]

class function:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        ('title', title),
        ('params', RE(r"\("), [RE(r"\)")]),
        ('params', RE(r"\["), [RE(r"\]")]),
    ]

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

class _group2:
    default_text = DELIMITER
    rules = [('number', number), ('string', RE(r"'"), [RE(r"'")])]

class _group20:
    default_text = DELIMITER
    rules = [('_group2', RE(r"\["), [RE(r"\]")], _group2)]
_group20.__name__ = '_group2'

class _group4:
    default_text = DELIMITER
    rules = []

class _group5:
    default_text = DELIMITER
    rules = []

class _group50:
    default_text = DELIMITER
    rules = [('_group5', RE(r"\{"), [RE(r"}")], _group5)]
_group50.__name__ = '_group5'

class _group6:
    default_text = DELIMITER
    rules = []

class _group7:
    default_text = DELIMITER
    rules = [('_group7', RE(r"\)"), [RE(r"\B|\b")])]

class _group8:
    default_text = DELIMITER
    rules = []

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'type': 'RegExp', 'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b"}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('function', RE(r"\b(function)"), [RE(r"$")], function),
    ('_group0', RE(r"(?=[a-zA-Z_][a-zA-Z_0-9]*'['\.]*)"), [RE(r"\B|\b")]),
    ('_group2', _group20, [RE(r"(?=\B|\b)")], _group4),
    ('_group5', _group50, [RE(r"(?=\B|\b)")], _group6),
    ('_group7', _group7, [RE(r"(?=\B|\b)")], _group8),
    ('comment', RE(r"^\s*\%\{\s*$"), [RE(r"^\s*\%\}\s*$")], comment),
    ('comment', RE(r"\%"), [RE(r"$")], comment0),
    None,  # ('number', number),
    None,  # _group2.rules[1],
]

rules[9] = ('number', number)
rules[10] = _group2.rules[1]
_group5.rules.extend(_group2.rules)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
