# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: smalltalk.js
name = 'Smalltalk'
file_patterns = ['*.smalltalk', '*.st']

keyword = ['self', 'super', 'nil', 'true', 'false', 'thisContext']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class string:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

type = [RE(r"\b[A-Z][A-Za-z0-9_]*")]

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

symbol = [RE(r"#[a-zA-Z_]\w*")]

string0 = [RE(r"\$.{1}")]

class _group2:
    default_text = DELIMITER
    rules = [
        # {'begin': '(\\|[ ]*)?[a-z][a-zA-Z0-9_]*'},
    ]

class _group3:
    default_text = DELIMITER
    rules = [
        None,  # rules[2],
        ('string', string0),
        ('number', number),
        ('symbol', symbol),
    ]

rules = [
    ('keyword', keyword),
    ('comment', RE(r"\""), [RE(r"\"")], comment),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('type', type),
    # {'begin': '[a-z][a-zA-Z0-9_]*:', 'relevance': 0},
    ('number', number),
    ('symbol', symbol),
    ('string', string0),
    ('_group2', RE(r"(?=\|[ ]*[a-z][a-zA-Z0-9_]*(?:[ ]+[a-z][a-zA-Z0-9_]*)*[ ]*\|)"), [RE(r"\|")], _group2),
    ('_group3', RE(r"\#\("), [RE(r"\)")], _group3),
]

_group3.rules[0] = rules[2]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
