# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: coffeescript.js
name = 'CoffeeScript'
file_patterns = ['*.coffeescript', '*.coffee', '*.cson', '*.iced']

built_in = """
    npm require console print module global window document
    """.split()

keyword = """
    in if for while finally new do return else break catch instanceof
    throw try this switch continue typeof delete debugger super then
    unless until loop of by when and or is isnt not
    """.split()

literal = ['true', 'false', 'null', 'undefined', 'yes', 'no', 'on', 'off']

number = [RE(r"\b(?:0b[01]+)")]

class number0:
    default_text = DELIMITER
    rules = [
        ('number', RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"), [RE(r"\B\b")]),
    ]
number0.__name__ = 'number'

class _group0:
    default_text = DELIMITER
    rules = []

class string:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class regexp:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': '#\\{', 'type': 'RegExp'}, 'className': 'subst', 'end': {'pattern': '}', 'type': 'RegExp'}},
        ('comment', RE(r"#"), [RE(r"$")], comment),
    ]

regexp0 = [RE(r"//[gim]*")]

regexp1 = [RE(r"\/(?![ *])(?:\\\/|.)*?\/[gim]*(?=\W|$)")]

class subst:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('number', number),
        None,  # rules[4],
        # {'className': 'string'},
        ('regexp', RE(r"///"), [RE(r"///")], regexp),
        ('regexp', regexp0),
        ('regexp', regexp1),
        # {'begin': '@[A-Za-z$_][0-9A-Za-z$_]*'},
        ('_group2', RE(r"`"), [RE(r"`")], 'javascript'),
    ]

class string0:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        ('subst', RE(r"#\{"), [RE(r"}")], subst),
    ]
string0.__name__ = 'string'

class string1:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        string0.rules[0],
    ]
string1.__name__ = 'string'

title = [RE(r"[A-Za-z$_][0-9A-Za-z$_]*")]

class _group3:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('number', number),
        None,  # rules[4],
        # {'className': 'string'},
        ('regexp', regexp1),
        # {'begin': '@[A-Za-z$_][0-9A-Za-z$_]*'},
        subst.rules[8],
    ]

class params:
    default_text = DELIMITER
    rules = [('_group3', RE(r"\("), [RE(r"\)")], _group3)]

class function:
    default_text = DELIMITER
    rules = [
        ('title', title),
        ('params', RE(r"(?=\([^\(])"), [RE(r"\B\b")], params),
    ]

class function0:
    default_text = DELIMITER
    rules = [function.rules[1]]
function0.__name__ = 'function'

class _group4:
    default_text = DELIMITER
    rules = [
        ('function', RE(r"(?=(?:\(.*\))?\s*\B[-=]>)"), [RE(r"[-=]>")], function0),
    ]

keyword0 = ['class']

keyword1 = ['extends']

class _group5:
    default_text = DELIMITER
    rules = [('keyword', keyword1), ('title', title)]

class class0:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        ('_group5', RE(r"\b(?:extends)"), [RE(r"\B\b")], _group5),
        ('title', title),
    ]
class0.__name__ = 'class'

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('number', number),
    ('number', number0, [RE(r"(?:\s*/)?")], _group0),
    ('string', RE(r"'''"), [RE(r"'''")], string),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")], string0),
    ('string', RE(r"\""), [RE(r"\"")], string1),
    ('regexp', regexp1),
    # {'begin': '@[A-Za-z$_][0-9A-Za-z$_]*'},
    subst.rules[8],
    ('comment', RE(r"###"), [RE(r"###")], comment),
    regexp.rules[0],
    ('function', RE(r"(?=^\s*[A-Za-z$_][0-9A-Za-z$_]*\s*=\s*(?:\(.*\))?\s*\B[-=]>)"), [RE(r"[-=]>")], function),
    ('_group4', RE(r"[:\(,=]\s*"), [RE(r"\B\b")], _group4),
    ('class', RE(r"\b(?:class)"), [RE(r"$")], class0),
    ('_group6', RE(r"(?=[A-Za-z$_][0-9A-Za-z$_]*:)"), [RE(r"(?=:)")]),
]

subst.rules[4] = rules[4]
_group3.rules[4] = rules[4]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
