# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: brainfuck.js
name = 'Brainfuck'
file_patterns = ['*.brainfuck', '*.bf']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

title = [RE(r"[\[\]]")]

string = [RE(r"[\.,]")]

literal = [RE(r"[\+\-]")]

class _group0:
    default_text = DELIMITER
    rules = [('literal', literal)]

rules = [
    ('comment', RE(r"[^\[\]\.,\+\-<> \r\n]"), [RE(r"(?=[\[\]\.,\+\-<> \r\n])")], comment),
    ('title', title),
    ('string', string),
    ('_group0', RE(r"(?=\+\+|\-\-)"), [RE(r"\B\b")], _group0),
    ('literal', literal),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
