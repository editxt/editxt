# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: yaml.js
name = 'YAML'
file_patterns = ['*.yaml', '*.yml', '*.YAML', '*.yaml']

flags = re.IGNORECASE | re.MULTILINE

literal = [
    '{',
    '}',
    'true',
    'false',
    'yes',
    'no',
    'Yes',
    'No',
    'True',
    'False',
    'null',
]

attr = [RE(r"^[ \-]*[a-zA-Z_][\w\-]*:")]

attr0 = [RE(r"^[ \-]*\"[a-zA-Z_][\w\-]*\":")]

attr1 = [RE(r"^[ \-]*'[a-zA-Z_][\w\-]*':")]

meta = [RE(r"^---s*$")]

class string:
    default_text = DELIMITER
    rules = [
        ('template-variable', RE(r"{{"), [RE(r"}}")]),
        ('template-variable', RE(r"%{"), [RE(r"}")]),
    ]

type = [RE(r"!![a-zA-Z_]\w*")]

meta0 = [RE(r"&[a-zA-Z_]\w*$")]

meta1 = [RE(r"\*[a-zA-Z_]\w*$")]

bullet = [RE(r"^ *-")]

class string0:
    default_text = DELIMITER
    rules = []
string0.__name__ = 'string'

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

rules = [
    ('literal', literal),
    ('attr', attr),
    ('attr', attr0),
    ('attr', attr1),
    ('meta', meta),
    ('string', RE(r"[\|>] *$"), [RE(r"(?=^[ \-]*[a-zA-Z_][\w\-]*:)")], string),
    ('_group1', RE(r"<%[%=-]?"), [RE(r"(?=[%-]?%>)")], 'ruby'),
    ('type', type),
    ('meta', meta0),
    ('meta', meta1),
    ('bullet', bullet),
    ('string', RE(r"'"), [RE(r"'")], string0),
    ('string', RE(r"\""), [RE(r"\"")], string0),
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('number', number),
]

string0.rules.extend(string.rules)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
