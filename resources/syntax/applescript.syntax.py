# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: applescript.js
name = 'AppleScript'
file_patterns = ['*.applescript', '*.osascript']

literal = [
    'AppleScript',
    'false',
    'linefeed',
    'return',
    'pi',
    'quote',
    'result',
    'space',
    'tab',
    'true',
]

keyword = [
    'about',
    'above',
    'after',
    'against',
    'and',
    'around',
    'as',
    'at',
    'back',
    'before',
    'beginning',
    'behind',
    'below',
    'beneath',
    'beside',
    'between',
    'but',
    'by',
    'considering',
    'contain',
    'contains',
    'continue',
    'copy',
    'div',
    'does',
    'eighth',
    'else',
    'end',
    'equal',
    'equals',
    'error',
    'every',
    'exit',
    'fifth',
    'first',
    'for',
    'fourth',
    'from',
    'front',
    'get',
    'given',
    'global',
    'if',
    'ignoring',
    'in',
    'into',
    'is',
    'it',
    'its',
    'last',
    'local',
    'me',
    'middle',
    'mod',
    'my',
    'ninth',
    'not',
    'of',
    'on',
    'onto',
    'or',
    'over',
    'prop',
    'property',
    'put',
    'ref',
    'reference',
    'repeat',
    'returning',
    'script',
    'second',
    'set',
    'seventh',
    'since',
    'sixth',
    'some',
    'tell',
    'tenth',
    'that',
    'the',
    'then',
    'third',
    'through',
    'thru',
    'timeout',
    'times',
    'to',
    'transaction',
    'try',
    'until',
    'where',
    'while',
    'whose',
    'with',
    'without',
]

built_in = [
    'alias',
    'application',
    'boolean',
    'class',
    'constant',
    'date',
    'file',
    'integer',
    'list',
    'number',
    'real',
    'record',
    'string',
    'text',
    'activate',
    'beep',
    'count',
    'delay',
    'launch',
    'log',
    'offset',
    'read',
    'round',
    'run',
    'say',
    'summarize',
    'write',
    'character',
    'characters',
    'contents',
    'day',
    'frontmost',
    'id',
    'item',
    'length',
    'month',
    'name',
    'paragraph',
    'paragraphs',
    'rest',
    'reverse',
    'running',
    'time',
    'version',
    'weekday',
    'word',
    'words',
    'year',
]

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

built_in0 = [
    RE(r"\b(clipboard info|the clipboard|info for|list (disks|folder)|mount volume|path to|(close|open for) access|(get|set) eof|current date|do shell script|get volume settings|random number|set volume|system attribute|system info|time to GMT|(load|run|store) script|scripting components|ASCII (character|number)|localized string|choose (application|color|file|file name|folder|from list|remote application|URL)|display (alert|dialog))\b|^\s*return\b"),
]

literal0 = [RE(r"\b(text item delimiters|current application|missing value)\b")]

keyword0 = [
    RE(r"\b(apart from|aside from|instead of|out of|greater than|isn't|(doesn't|does not) (equal|come before|come after|contain)|(greater|less) than( or equal)?|(starts?|ends|begins?) with|contained by|comes (before|after)|a (ref|reference)|POSIX file|POSIX path|(date|time) string|quoted form)\b"),
]

keyword1 = ['on']

title = [RE(r"[a-zA-Z_]\w*")]

class params:
    default_text = DELIMITER
    word_groups = [('number', number)]
    delimited_ranges = [('string', RE(r"\""), [RE(r"\"")])]

class _group1:
    default_text = DELIMITER
    word_groups = [('keyword', keyword1), ('title', title)]
    delimited_ranges = [('params', RE(r"\("), [RE(r"\)")], params)]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]
    delimited_ranges = [('comment', RE(r"--"), [RE(r"$")], comment)]
comment0.__name__ = 'comment'

word_groups = [
    ('literal', literal),
    ('keyword', keyword),
    ('built_in', built_in),
    ('number', number),
    ('built_in', built_in0),
    ('literal', literal0),
    ('keyword', keyword0),
]

delimited_ranges = [
    ('string', RE(r"\""), [RE(r"\"")]),
    ('_group1', RE(r"\b(on)"), [RE(r"\B|\b")], _group1),
    ('comment', RE(r"--"), [RE(r"$")], comment),
    ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment0),
    ('comment', RE(r"#"), [RE(r"$")], comment),
]
