# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: fsharp.js
name = 'F#'
file_patterns = ['*.fsharp', '*.fs']

keyword = """
    abstract and as assert base begin class default delegate do done
    downcast downto elif else end exception extern false finally for fun
    function global if in inherit inline interface internal lazy let
    match member module mutable namespace new null of open or override
    private public rec return sig static struct then to true try type
    upcast use val void when while with yield
    """.split()

keyword0 = [RE(r"\b(?:yield|return|let|do)!")]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '""'},
    ]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class _class:
    default_text_color = DELIMITER
    rules = [('_class', [RE(r"\(|=|$")])]

keyword1 = ['type']

title = [RE(r"[a-zA-Z_]\w*")]

title0 = [RE(r"'[a-zA-Z0-9_]+")]

class _group0:
    default_text_color = DELIMITER
    rules = [('title', title0)]

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword1),
        ('title', title),
        ('_group0', RE(r"<"), [RE(r">")], _group0),
    ]
class0.__name__ = 'class'

class symbol:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

rules = [
    ('keyword', keyword),
    ('keyword', keyword0),
    ('string', RE(r"@\""), [RE(r"\"")], string),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")]),
    ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment),
    ('class', RE(r"\b(?:type)"), [_class], class0),
    ('meta', RE(r"\[<"), [RE(r">\]")]),
    ('symbol', RE(r"\B(?:'[A-Za-z])\b"), [RE(r"\B\b")], symbol),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('number', number),
]
