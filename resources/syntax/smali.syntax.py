# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: smali.js
name = 'Smali'
file_patterns = ['*.smali', '*.smali']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

keyword = [RE(r"\s*\.end\s[a-zA-Z0-9]*")]

keyword0 = [RE(r"^[ ]*\.[a-zA-Z]*")]

keyword1 = [RE(r"\s:[a-zA-Z_0-9]*")]

keyword2 = [
    RE(r"\s(transient|constructor|abstract|final|synthetic|public|private|protected|static|bridge|system)"),
]

built_in = [
    RE(r"\s(add|and|cmp|cmpg|cmpl|const|div|double|float|goto|if|int|long|move|mul|neg|new|nop|not|or|rem|return|shl|shr|sput|sub|throw|ushr|xor)\s"),
]

built_in0 = [
    RE(r"\s(add|and|cmp|cmpg|cmpl|const|div|double|float|goto|if|int|long|move|mul|neg|new|nop|not|or|rem|return|shl|shr|sput|sub|throw|ushr|xor)((\-|/)[a-zA-Z0-9]+)+\s"),
]

built_in1 = [
    RE(r"\s(aget|aput|array|check|execute|fill|filled|goto/16|goto/32|iget|instance|invoke|iput|monitor|packed|sget|sparse)((\-|/)[a-zA-Z0-9]+)*\s"),
]

class0 = [RE(r"L[^(;:\n]*;")]

rules = [
    ('string', RE(r"\""), [RE(r"\"")]),
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('keyword', keyword),
    ('keyword', keyword0),
    ('keyword', keyword1),
    ('keyword', keyword2),
    ('built_in', built_in),
    ('built_in', built_in0),
    ('built_in', built_in1),
    ('class', class0),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
