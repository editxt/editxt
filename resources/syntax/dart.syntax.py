# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: dart.js
name = 'Dart'
file_patterns = ['*.dart']

built_in = """
    print Comparable DateTime Duration Function Iterable Iterator List
    Map Match Null Object Pattern RegExp Set Stopwatch String
    StringBuffer StringSink Symbol Type Uri bool double int num document
    window querySelector querySelectorAll Element ElementList
    """.split()

keyword = """
    assert break case catch class const continue default do else enum
    extends false final finally for if in is new null rethrow return
    super switch this throw true try var void while with abstract as
    dynamic export external factory get implements import library
    operator part set static typedef
    """.split()

string = ('string', RE(r"r'''"), [RE(r"'''")])

string0 = ('string', RE(r"r\"\"\""), [RE(r"\"\"\"")])

string1 = ('string', RE(r"r'"), [RE(r"'")])

string2 = ('string', RE(r"r\""), [RE(r"\"")])

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

number0 = ('number', number)

class subst:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['true', 'false', 'null', 'this', 'is', 'new', 'super']),
        number0,
        string,
        string0,
        string1,
        string2,
        None, # string4,
        None, # string5,
        None, # string6,
        None, # string7,
    ]

subst0 = ('subst', RE(r"\$\{"), [RE(r"}")], subst)

class string3:
    default_text_color = DELIMITER
    rules = [operator_escape, subst0]
string3.__name__ = 'string'

string4 = ('string', RE(r"'''"), [RE(r"'''")], string3)

string5 = ('string', RE(r"\"\"\""), [RE(r"\"\"\"")], string3)

string6 = ('string', RE(r"'"), [RE(r"'")], string3)

string7 = ('string', RE(r"\""), [RE(r"\"")], string3)

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

class _class0:
    default_text_color = DELIMITER
    rules = [('_class', [RE(r"{")])]
_class0.__name__ = '_class'

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['class', 'interface']),
        ('_group1', RE(r"\b(?:extends|implements)"), [RE(r"\B\b")]),
        ('title', [RE(r"[a-zA-Z_]\w*")]),
    ]
class0.__name__ = 'class'

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    string,
    string0,
    string1,
    string2,
    string4,
    string5,
    string6,
    string7,
    ('comment', RE(r"/\*\*"), [RE(r"\*/")], 'markdown'),
    ('comment', RE(r"///"), [RE(r"$")], 'markdown'),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('class', RE(r"\b(?:class|interface)"), [_class0], class0),
    number0,
    ('meta', [RE(r"@[A-Za-z]+")]),
    # ignore {'begin': '=>'},
]

subst.rules[6] = string4
subst.rules[7] = string5
subst.rules[8] = string6
subst.rules[9] = string7
