# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: crystal.js
name = 'Crystal'
file_patterns = ['*.crystal', '*.cr']

keyword = """
    abstract alias as asm begin break case class def do else elsif end
    ensure enum extend for fun if ifdef include instance_sizeof is_a?
    lib macro module next of out pointerof private protected rescue
    responds_to? return require self sizeof struct super then type
    typeof union unless until when while with yield __DIR__ __FILE__
    __LINE__
    """.split()

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

class subst:
    default_text_color = DELIMITER
    rules = [('keyword', keyword), ('literal', ['false', 'nil', 'true'])]

subst0 = ('subst', RE(r"#{"), [RE(r"}")], subst)

class string:
    default_text_color = DELIMITER
    rules = [operator_escape, subst0]

string1 = ('string', RE(r"'"), [RE(r"'")], string)

string2 = ('string', RE(r"\""), [RE(r"\"")], string)

string3 = ('string', RE(r"`"), [RE(r"`")], string)

class _group0:
    default_text_color = DELIMITER
    rules = []

class string4:
    default_text_color = DELIMITER
    rules = [('_group0', RE(r"\("), [RE(r"\)")], _group0)]
string4.__name__ = 'string'

string5 = ('string', RE(r"%w?\("), [RE(r"\)")], string4)

class _group1:
    default_text_color = DELIMITER
    rules = []

class string6:
    default_text_color = DELIMITER
    rules = [('_group1', RE(r"\["), [RE(r"\]")], _group1)]
string6.__name__ = 'string'

string7 = ('string', RE(r"%w?\["), [RE(r"\]")], string6)

class _group2:
    default_text_color = DELIMITER
    rules = []

class string8:
    default_text_color = DELIMITER
    rules = [('_group2', RE(r"{"), [RE(r"}")], _group2)]
string8.__name__ = 'string'

string9 = ('string', RE(r"%w?{"), [RE(r"}")], string8)

class _group3:
    default_text_color = DELIMITER
    rules = []

class string10:
    default_text_color = DELIMITER
    rules = [('_group3', RE(r"<"), [RE(r">")], _group3)]
string10.__name__ = 'string'

string11 = ('string', RE(r"%w?<"), [RE(r">")], string10)

string12 = ('string', RE(r"%w?/"), [RE(r"/")], string)

string13 = ('string', RE(r"%w?%"), [RE(r"%")], string)

string14 = ('string', RE(r"%w?-"), [RE(r"-")], string)

string15 = ('string', RE(r"%w?\|"), [RE(r"\|")], string)

class regexp:
    default_text_color = DELIMITER
    rules = [operator_escape, subst0]

class _group5:
    default_text_color = DELIMITER
    rules = []

class regexp2:
    default_text_color = DELIMITER
    rules = [('_group5', RE(r"\("), [RE(r"\)")], _group5)]
regexp2.__name__ = 'regexp'

class _group6:
    default_text_color = DELIMITER
    rules = []

class regexp4:
    default_text_color = DELIMITER
    rules = [('_group6', RE(r"\["), [RE(r"\]")], _group6)]
regexp4.__name__ = 'regexp'

class _group7:
    default_text_color = DELIMITER
    rules = []

class regexp6:
    default_text_color = DELIMITER
    rules = [('_group7', RE(r"{"), [RE(r"}")], _group7)]
regexp6.__name__ = 'regexp'

class _group8:
    default_text_color = DELIMITER
    rules = []

class regexp8:
    default_text_color = DELIMITER
    rules = [('_group8', RE(r"<"), [RE(r">")], _group8)]
regexp8.__name__ = 'regexp'

regexp10 = ('regexp', RE(r"%r/"), [RE(r"/")], regexp)

regexp11 = ('regexp', RE(r"%r%"), [RE(r"%")], regexp)

regexp12 = ('regexp', RE(r"%r-"), [RE(r"-")], regexp)

regexp13 = ('regexp', RE(r"%r\|"), [RE(r"\|")], regexp)

class _group4:
    default_text_color = DELIMITER
    rules = [
        ('regexp', RE(r"/"), [RE(r"/[a-z]*")], regexp),
        ('regexp', RE(r"%r\("), [RE(r"\)")], regexp2),
        ('regexp', RE(r"%r\["), [RE(r"\]")], regexp4),
        ('regexp', RE(r"%r{"), [RE(r"}")], regexp6),
        ('regexp', RE(r"%r<"), [RE(r">")], regexp8),
        regexp10,
        regexp11,
        regexp12,
        regexp13,
    ]

_group40 = ('_group4', RE(r"(?:!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\[|\{|\(|\^|\^=|\||\|=|\|\||~)\s*"), [RE(r"\B\b")], _group4)

class _group9:
    default_text_color = DELIMITER
    rules = []

class regexp14:
    default_text_color = DELIMITER
    rules = [('_group9', RE(r"\("), [RE(r"\)")], _group9)]
regexp14.__name__ = 'regexp'

regexp15 = ('regexp', RE(r"%r\("), [RE(r"\)")], regexp14)

class _group100:
    default_text_color = DELIMITER
    rules = []
_group100.__name__ = '_group10'

class regexp16:
    default_text_color = DELIMITER
    rules = [('_group10', RE(r"\["), [RE(r"\]")], _group100)]
regexp16.__name__ = 'regexp'

regexp17 = ('regexp', RE(r"%r\["), [RE(r"\]")], regexp16)

class _group11:
    default_text_color = DELIMITER
    rules = []

class regexp18:
    default_text_color = DELIMITER
    rules = [('_group11', RE(r"{"), [RE(r"}")], _group11)]
regexp18.__name__ = 'regexp'

regexp19 = ('regexp', RE(r"%r{"), [RE(r"}")], regexp18)

class _group12:
    default_text_color = DELIMITER
    rules = []

class regexp20:
    default_text_color = DELIMITER
    rules = [('_group12', RE(r"<"), [RE(r">")], _group12)]
regexp20.__name__ = 'regexp'

regexp21 = ('regexp', RE(r"%r<"), [RE(r">")], regexp20)

class meta:
    default_text_color = DELIMITER
    rules = []

meta0 = ('meta', RE(r"@\["), [RE(r"\]")], meta)

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

comment0 = ('comment', RE(r"#"), [RE(r"$")], comment)

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['class', 'module', 'struct']),
        comment0,
        ('title', [RE(r"[A-Za-z_]\w*(?:::\w+)*(?:\?|\!)?")]),
        # ignore {'begin': '<'},
    ]
class0.__name__ = 'class'

class1 = ('class', RE(r"\b(?:class|module|struct)"), [RE(r"$|;")], class0)

class class2:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['lib', 'enum', 'union']),
        comment0,
        ('title', [RE(r"[A-Za-z_]\w*(?:::\w+)*(?:\?|\!)?")]),
    ]
class2.__name__ = 'class'

class3 = ('class', RE(r"\b(?:lib|enum|union)"), [RE(r"$|;")], class2)

title0 = [
    RE(r"[a-zA-Z_]\w*[!?=]?|[-+~]\@|<<|>>|=~|===?|<=>|[<>]=?|\*\*|[-/+%^&*~`|]|\[\][=?]?"),
]

class function:
    default_text_color = DELIMITER
    rules = [('keyword', ['def']), ('title', title0)]

function0 = ('function', RE(r"\b(?:def)"), [RE(r"\B\b")], function)

class function1:
    default_text_color = DELIMITER
    rules = [('keyword', ['fun', 'macro']), ('title', title0)]
function1.__name__ = 'function'

function2 = ('function', RE(r"\b(?:fun|macro)"), [RE(r"\B\b")], function1)

symbol = ('symbol', [RE(r"[a-zA-Z_]\w*(?:\!|\?)?:")])

class symbol0:
    default_text_color = DELIMITER
    rules = [
        string1,
        string2,
        string3,
        string5,
        string7,
        string9,
        string11,
        string12,
        string13,
        string14,
        string15,
        # ignore {'begin': '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\][=?]?'},
    ]
symbol0.__name__ = 'symbol'

symbol1 = ('symbol', RE(r":"), [RE(r"\B\b")], symbol0)

number = ('number', [RE(r"\b0b(?:[01_]*[01])(?:_[uif](?:8|16|32|64))?")])

number0 = ('number', [RE(r"\b0o(?:[0-7_]*[0-7])(?:_[uif](?:8|16|32|64))?")])

number1 = ('number', [RE(r"\b0x(?:[A-Fa-f0-9_]*[A-Fa-f0-9])(?:_[uif](?:8|16|32|64))?")])

number2 = [
    RE(r"\b(?:(?:[0-9][0-9_]*[0-9]|[0-9])(?:\.[0-9_]*[0-9])?(?:[eE][+-]?[0-9_]*[0-9])?)(?:_[uif](?:8|16|32|64))?"),
]

number3 = ('number', number2)

class template_variable:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword),
        ('literal', ['false', 'nil', 'true']),
        string1,
        string2,
        string3,
        string5,
        string7,
        string9,
        string11,
        string12,
        string13,
        string14,
        string15,
        _group40,
        regexp15,
        regexp17,
        regexp19,
        regexp21,
        regexp10,
        regexp11,
        regexp12,
        regexp13,
        meta0,
        comment0,
        class1,
        class3,
        function0,
        function2,
        symbol,
        symbol1,
        number,
        number0,
        number1,
        number3,
    ]
template_variable.__name__ = 'template-variable'

rules = [
    ('keyword', keyword),
    ('literal', ['false', 'nil', 'true']),
    ('template-variable', RE(r"\{\{"), [RE(r"\}\}")], template_variable),
    ('template-variable', RE(r"\{%"), [RE(r"%\}")], template_variable),
    string1,
    string2,
    string3,
    string5,
    string7,
    string9,
    string11,
    string12,
    string13,
    string14,
    string15,
    _group40,
    regexp15,
    regexp17,
    regexp19,
    regexp21,
    regexp10,
    regexp11,
    regexp12,
    regexp13,
    meta0,
    comment0,
    class1,
    class3,
    function0,
    function2,
    symbol,
    symbol1,
    number,
    number0,
    number1,
    number3,
]

subst.rules.extend(rules)
_group0.rules.extend(string4.rules)
_group1.rules.extend(string6.rules)
_group2.rules.extend(string8.rules)
_group3.rules.extend(string10.rules)
_group5.rules.extend(regexp2.rules)
_group6.rules.extend(regexp4.rules)
_group7.rules.extend(regexp6.rules)
_group8.rules.extend(regexp8.rules)
_group9.rules.extend(regexp14.rules)
_group100.rules.extend(regexp16.rules)
_group11.rules.extend(regexp18.rules)
_group12.rules.extend(regexp20.rules)
meta.rules.extend(rules)
