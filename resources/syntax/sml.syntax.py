# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: sml.js
name = 'SML'
file_patterns = ['*.sml', '*.ml']

built_in = """
    array bool char exn int list option order real ref string substring
    vector unit word
    """.split()

keyword = """
    abstype and andalso as case datatype do else end eqtype exception fn
    fun functor handle if in include infix infixr let local nonfix of op
    open orelse raise rec sharing sig signature struct structure then
    type val with withtype where while
    """.split()

literal = ['true', 'false', 'NONE', 'SOME', 'LESS', 'EQUAL', 'GREATER', 'nil']

literal0 = [RE(r"\[(?:\|\|)?\]|\(\)")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

symbol = [RE(r"'[A-Za-z_](?!')[\w']*")]

type = [RE(r"`[A-Z][\w']*")]

type0 = [RE(r"\b[A-Z][\w']*")]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

number = [
    RE(r"\b(?:0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*(?:[Lln]|(?:\.[0-9_]*)?(?:[eE][-+]?[0-9_]+)?)?)"),
]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('literal', literal0),
    ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment),
    ('symbol', symbol),
    ('type', type),
    ('type', type0),
    # ignore {'begin': "[a-z_]\\w*'[\\w']*"},
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('number', number),
    # ignore {'begin': {'pattern': '[-=]>', 'type': 'RegExp'}},
]
