# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: lisp.js
name = 'Lisp'
file_patterns = ['*.lisp']

number = [RE(r"(\-|\+)?\d+(\.\d+|\/\d+)?((d|e|f|l|s|D|E|F|L|S)(\+|\-)?\d+)?")]

number0 = [RE(r"#(b|B)[0-1]+(/[0-1]+)?")]

number1 = [RE(r"#(o|O)[0-7]+(/[0-7]+)?")]

number2 = [RE(r"#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?")]

literal = [RE(r"\b(t{1}|nil)\b")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

symbol = [
    RE(r"[:&][a-zA-Z_\-\+\*\/\<\=\>\&\#][a-zA-Z0-9_\-\+\*\/\<\=\>\&\#!]*"),
]

class _group3:
    default_text = DELIMITER
    rules = [
        None,  # ('literal', literal),
        None,  # rules[7],
        None,  # rules[4],
    ]

class _group1:
    default_text = DELIMITER
    rules = [
        None,  # rules[4],
        None,  # rules[7],
        ('_group2', RE(r"\*"), [RE(r"\*")]),
        ('symbol', symbol),
        ('_group3', RE(r"\("), [RE(r"\)")], _group3),
        # {'begin': '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*', 'relevance': 0},
    ]

name0 = ['quote']

class _group7:
    default_text = DELIMITER
    rules = [
        None,  # ('literal', literal),
        None,  # rules[7],
        None,  # rules[4],
    ]

class _group5:
    default_text = DELIMITER
    rules = [
        ('name', name0),
        None,  # rules[4],
        None,  # rules[7],
        ('_group6', RE(r"\*"), [RE(r"\*")]),
        ('symbol', symbol),
        ('_group7', RE(r"\("), [RE(r"\)")], _group7),
        # {'begin': '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*', 'relevance': 0},
    ]

class _group11:
    default_text = DELIMITER
    rules = [
        None,  # ('literal', literal),
        None,  # rules[7],
        None,  # rules[4],
    ]

class _group9:
    default_text = DELIMITER
    rules = [
        None,  # rules[4],
        None,  # rules[7],
        ('_group10', RE(r"\*"), [RE(r"\*")]),
        ('symbol', symbol),
        ('_group11', RE(r"\("), [RE(r"\)")], _group11),
        # {'begin': '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*', 'relevance': 0},
    ]

name1 = [RE(r"[a-zA-Z_\-\+\*\/\<\=\>\&\#][a-zA-Z0-9_\-\+\*\/\<\=\>\&\#!]*")]

name2 = [RE(r"\|[^]*?\|")]

class _group16:
    default_text = DELIMITER
    rules = [
        None,  # rules[11],
        # {},
        # {'begin': '\\(\\s*', 'end': '\\)'},
        None,  # ('literal', literal),
        None,  # rules[4],
        None,  # rules[7],
        None,  # rules[8],
        None,  # _group9.rules[2],
        None,  # ('symbol', symbol),
        # {'begin': '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*', 'relevance': 0},
    ]

class _group15:
    default_text = DELIMITER
    rules = [
        ('name', name1),
        ('name', name2),
        ('_group16', RE(r"\B|\b"), [RE(r"")], _group16),
    ]

rules = [
    ('number', number),
    ('number', number0),
    ('number', number1),
    ('number', number2),
    ('number', RE(r"#(c|C)\((\-|\+)?\d+(\.\d+|\/\d+)?((d|e|f|l|s|D|E|F|L|S)(\+|\-)?\d+)? +(\-|\+)?\d+(\.\d+|\/\d+)?((d|e|f|l|s|D|E|F|L|S)(\+|\-)?\d+)?"), [RE(r"\)")]),
    ('meta', RE(r"^#!"), [RE(r"$")]),
    ('literal', literal),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('comment', RE(r";"), [RE(r"$")], comment),
    ('_group1', RE(r"['`]\("), [RE(r"\)")], _group1),
    ('_group5', RE(r"\(quote "), [RE(r"\)")], _group5),
    ('_group9', RE(r"'\|[^]*?\|"), [RE(r"\B|\b")], _group9),
    ('_group15', RE(r"\(\s*"), [RE(r"\)")], _group15),
    # {'begin': '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*', 'relevance': 0},
]

_group1.rules[0] = rules[4]
_group1.rules[1] = rules[7]
_group3.rules[0] = ('literal', literal)
_group3.rules[1] = rules[7]
_group3.rules[2] = rules[4]
_group5.rules[1] = rules[4]
_group5.rules[2] = rules[7]
_group7.rules[0] = ('literal', literal)
_group7.rules[1] = rules[7]
_group7.rules[2] = rules[4]
_group9.rules[0] = rules[4]
_group9.rules[1] = rules[7]
_group11.rules[0] = ('literal', literal)
_group11.rules[1] = rules[7]
_group11.rules[2] = rules[4]
_group16.rules[0] = rules[11]
_group16.rules[1] = ('literal', literal)
_group16.rules[2] = rules[4]
_group16.rules[3] = rules[7]
_group16.rules[4] = rules[8]
_group16.rules[5] = _group9.rules[2]
_group16.rules[6] = ('symbol', symbol)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
