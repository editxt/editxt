# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: ceylon.js
name = 'Ceylon'
file_patterns = ['*.ceylon']

keyword = """
    assembly module package import alias class interface object given
    value assign void function new of extends satisfies abstracts in out
    return break continue throw assert dynamic if else switch case for
    while try catch finally then let this outer super is exists nonempty
    shared abstract formal default actual variable late native
    deprecatedfinal sealed annotation suppressWarnings small
    """.split()

meta = ['doc', 'by', 'license', 'see', 'throws', 'tagged']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

meta0 = [RE(r"@[a-z]\w*(?:\:\"[^\"]*\")?")]

class _subst:
    default_text_color = DELIMITER
    rules = [('_subst', [RE(r"``")])]

keyword0 = """
    assembly module package import alias class interface object given
    value assign void function new of extends satisfies abstracts in out
    return break continue throw assert dynamic if else switch case for
    while try catch finally then let this outer super is exists nonempty
    """.split()

number = [
    RE(r"#[0-9a-fA-F_]+|\$[01_]+|[0-9_]+(?:\.[0-9_](?:[eE][+-]?\d+)?)?[kMGTPmunpf]?"),
]

class subst:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword0),
        None,  # rules[5],
        None,  # rules[6],
        ('string', RE(r"'"), [RE(r"'")]),
        ('number', number),
    ]

class string:
    default_text_color = DELIMITER
    rules = [('subst', _subst, [_subst], subst)]

rules = [
    ('keyword', keyword),
    ('meta', meta),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('meta', meta0),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")]),
    ('string', RE(r"\""), [RE(r"\"")], string),
    subst.rules[3],
    ('number', number),
]

subst.rules[1] = rules[5]
subst.rules[2] = rules[6]
