# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: ceylon.js
name = 'Ceylon'
file_patterns = ['*.ceylon']

keyword = """
    assembly module package import alias class interface object given
    value assign void function new of extends satisfies abstracts in out
    return break continue throw assert dynamic if else switch case for
    while try catch finally then let this outer super is exists nonempty
    shared abstract formal default actual variable late native
    deprecatedfinal sealed annotation suppressWarnings small
    """.split()

meta = ['doc', 'by', 'license', 'see', 'throws', 'tagged']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

meta0 = [RE(r"@[a-z]\w*(?:\:\"[^\"]*\")?")]

keyword0 = """
    assembly module package import alias class interface object given
    value assign void function new of extends satisfies abstracts in out
    return break continue throw assert dynamic if else switch case for
    while try catch finally then let this outer super is exists nonempty
    """.split()

number = [
    RE(r"#[0-9a-fA-F_]+|\$[01_]+|[0-9_]+(?:\.[0-9_](?:[eE][+-]?\d+)?)?[kMGTPmunpf]?"),
]

class _subst:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        None,  # rules[5],
        # {'begin': '"', 'className': 'string', 'end': ...},
        ('string', RE(r"'"), [RE(r"'")]),
        ('number', number),
    ]

class string:
    default_text = DELIMITER
    rules = [('_subst', RE(r"``"), [RE(r"``")], _subst)]

rules = [
    ('keyword', keyword),
    ('meta', meta),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('meta', meta0),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")]),
    ('string', RE(r"\""), [RE(r"\"")], string),
    _subst.rules[2],
    ('number', number),
]

_subst.rules[1] = rules[5]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
