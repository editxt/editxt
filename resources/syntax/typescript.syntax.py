# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: typescript.js
name = 'TypeScript'
file_patterns = ['*.typescript', '*.ts']

built_in = """
    eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent
    encodeURI encodeURIComponent escape unescape Object Function Boolean
    Error EvalError InternalError RangeError ReferenceError
    StopIteration SyntaxError TypeError URIError Number Math Date String
    RegExp Array Float32Array Float64Array Int16Array Int32Array
    Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray
    ArrayBuffer DataView JSON Intl arguments require module console
    window document any number boolean string void
    """.split()

keyword = """
    in if for while finally var new function do return void else break
    catch instanceof with throw case default try this switch continue
    typeof delete let yield const class public private protected get set
    super static implements enum export import declare type namespace
    abstract
    """.split()

literal = ['true', 'false', 'null', 'undefined', 'NaN', 'Infinity']

meta = [RE(r"^\s*['\"]use strict['\"]")]

number = [RE(r"\b(?:0[bB][01]+)")]

number0 = [RE(r"\b(?:0[oO][0-7]+)")]

number1 = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

class string0:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        ('subst', RE(r"\$\{"), [RE(r"\}")]),
    ]
string0.__name__ = 'string'

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

keyword0 = ['return', 'throw', 'case']

class _group4:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

class regexp:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        ('_group4', RE(r"\["), [RE(r"\]")], _group4),
    ]

class _group0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword0),
        None,  # rules[7],
        None,  # rules[8],
        ('regexp', RE(r"\/"), [RE(r"\/[gimuy]*")], regexp),
    ]

class _function:
    default_text_color = DELIMITER
    rules = [('_function', [RE(r"[\{;]")])]

title = [RE(r"[A-Za-z$_][0-9A-Za-z$_]*")]

class _params:
    default_text_color = DELIMITER
    rules = [('_params', [RE(r"\(")])]

class _params0:
    default_text_color = DELIMITER
    rules = [('_params', [RE(r"\)")])]
_params0.__name__ = '_params'

class params:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        None,  # rules[7],
        None,  # rules[8],
    ]

class function:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('title', title),
        ('params', _params, [_params0], params),
    ]

keyword1 = ['interface', 'extends']

keyword2 = ['interface']

class _group3:
    default_text_color = DELIMITER
    rules = [('keyword', keyword1), ('keyword', keyword2)]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('meta', meta),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('string', RE(r"`"), [RE(r"`")], string0),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('number', number),
    ('number', number0),
    ('number', number1),
    ('_group0', RE(r"(?:!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~|\b(?:case|return|throw)\b)\s*"), [RE(r"\B\b")], _group0),
    ('function', RE(r"function"), [_function], function),
    ('_group1', RE(r"\b(?:constructor)"), [RE(r"\{")]),
    ('_group2', RE(r"\b(?:module)"), [RE(r"\{")]),
    ('_group3', RE(r"\b(?:interface)"), [RE(r"\{")], _group3),
    # ignore {'begin': {'pattern': '\\$[(.]', 'type': 'RegExp'}},
    # ignore {'begin': '\\.[a-zA-Z]\\w*', 'relevance': 0},
]

_group0.rules[1] = rules[7]
_group0.rules[2] = rules[8]
params.rules[3] = rules[7]
params.rules[4] = rules[8]
