# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: lasso.js
name = 'Lasso'
file_patterns = ['*.lasso', '*.ls', '*.lassoscript']

flags = re.IGNORECASE | re.MULTILINE

built_in = """
    array date decimal duration integer map pair string tag xml null
    boolean bytes keyword list locale queue set stack staticarray local
    var variable global data self inherited currentcapture givenblock
    """.split()

keyword = """
    error_code error_msg error_pop error_push error_reset cache
    database_names database_schemanames database_tablenames define_tag
    define_type email_batch encode_set html_comment handle handle_error
    header if inline iterate ljax_target link link_currentaction
    link_currentgroup link_currentrecord link_detail link_firstgroup
    link_firstrecord link_lastgroup link_lastrecord link_nextgroup
    link_nextrecord link_prevgroup link_prevrecord log loop
    namespace_using output_none portal private protect records referer
    referrer repeating resultset rows search_args search_arguments
    select sort_args sort_arguments thread_atomic value_list while abort
    case else if_empty if_false if_null if_true loop_abort loop_continue
    loop_count params params_up return return_value run_children
    soap_definetag soap_lastrequest soap_lastresponse tag_name ascending
    average by define descending do equals frozen group handle_failure
    import in into join let match max min on order parent protected
    provide public require returnhome skip split_thread sum take thread
    to trait type where with yield yieldhome and or not
    """.split()

literal = """
    true false none minimal full all void bw nbw ew new cn ncn lt lte gt
    gte eq neq rx nrx ft
    """.split()

class meta0:
    default_text_color = DELIMITER
    rules = [('meta', RE(r"\]|\?>"), [RE(r"\B|\b")])]
meta0.__name__ = 'meta'

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

comment0 = ('comment', RE(r"<!--"), [RE(r"-->")], comment)

class _group0:
    default_text_color = DELIMITER
    rules = [comment0]

class meta3:
    default_text_color = DELIMITER
    rules = [('meta', RE(r"\[noprocess\]"), [RE(r"\B|\b")])]
meta3.__name__ = 'meta'

class _group2:
    default_text_color = DELIMITER
    rules = [comment0]

meta4 = ('meta', meta3, [RE(r"(?=\[/noprocess\])")], _group2)

meta5 = ('meta', [RE(r"\[/noprocess|<\?(?:lasso(?:script)?|=)")])

class meta7:
    default_text_color = DELIMITER
    rules = [('meta', RE(r"\[no_square_brackets"), [RE(r"\B|\b")])]
meta7.__name__ = 'meta'

class _group4:
    default_text_color = DELIMITER
    rules = [comment0]

comment1 = ('comment', RE(r"/\*\*!"), [RE(r"\*/")], comment)

comment2 = ('comment', RE(r"//"), [RE(r"$")], comment)

comment3 = ('comment', RE(r"/\*"), [RE(r"\*/")], comment)

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)|(?:infinity|nan)\b"),
]

number0 = ('number', number)

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

class string:
    default_text_color = DELIMITER
    rules = [operator_escape]

string0 = ('string', RE(r"'"), [RE(r"'")], string)

string1 = ('string', RE(r"\""), [RE(r"\"")], string)

string2 = ('string', RE(r"`"), [RE(r"`")])

_group6 = ('_group6', RE(r"#"), [RE(r"\d+")])

type = ('type', RE(r"::\s*"), [RE(r"[a-zA-Z_][a-zA-Z0-9_.]*")])

attr = ('attr', [RE(r"-(?!infinity)[a-zA-Z_]\w*")])

attr0 = ('attr', [RE(r"(?:\.\.\.)")])

class _group7:
    default_text_color = DELIMITER
    rules = [('symbol', [RE(r"'[a-zA-Z_][a-zA-Z0-9_.]*'")])]

_group70 = ('_group7', RE(r"(?:->|\.\.?)\s*"), [RE(r"\B\b")], _group7)

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['define']),
        ('title', [RE(r"[a-zA-Z_]\w*(?:=(?!>))?")]),
    ]
class0.__name__ = 'class'

class1 = ('class', RE(r"\b(?:define)"), [RE(r"(?=\(|=>)")], class0)

class _group3:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('meta', meta0, [RE(r"(?=\[noprocess\]|<\?(?:lasso(?:script)?|=))")], _group4),
        meta4,
        meta5,
        comment1,
        comment2,
        comment3,
        number0,
        string0,
        string1,
        string2,
        # ignore {'begin': '[#$][a-zA-Z_][a-zA-Z0-9_.]*'},
        _group6,
        type,
        attr,
        attr0,
        _group70,
        class1,
    ]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('meta', meta0, [RE(r"(?=\[|<\?(?:lasso(?:script)?|=))")], _group0),
    meta4,
    meta5,
    ('meta', meta7, [RE(r"\[/no_square_brackets\]")], _group3),
    ('meta', [RE(r"\[")]),
    ('meta', [RE(r"^#!.+lasso9\b")]),
    comment1,
    comment2,
    comment3,
    number0,
    string0,
    string1,
    string2,
    # ignore {'begin': '[#$][a-zA-Z_][a-zA-Z0-9_.]*'},
    _group6,
    type,
    attr,
    attr0,
    _group70,
    class1,
]
