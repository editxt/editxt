# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: lasso.js
name = 'Lasso'
file_patterns = ['*.lasso', '*.ls', '*.lassoscript']

flags = re.IGNORECASE | re.MULTILINE

literal = [
    'true',
    'false',
    'none',
    'minimal',
    'full',
    'all',
    'void',
    'bw',
    'nbw',
    'ew',
    'new',
    'cn',
    'ncn',
    'lt',
    'lte',
    'gt',
    'gte',
    'eq',
    'neq',
    'rx',
    'nrx',
    'ft',
]

keyword = [
    'error_code',
    'error_msg',
    'error_pop',
    'error_push',
    'error_reset',
    'cache',
    'database_names',
    'database_schemanames',
    'database_tablenames',
    'define_tag',
    'define_type',
    'email_batch',
    'encode_set',
    'html_comment',
    'handle',
    'handle_error',
    'header',
    'if',
    'inline',
    'iterate',
    'ljax_target',
    'link',
    'link_currentaction',
    'link_currentgroup',
    'link_currentrecord',
    'link_detail',
    'link_firstgroup',
    'link_firstrecord',
    'link_lastgroup',
    'link_lastrecord',
    'link_nextgroup',
    'link_nextrecord',
    'link_prevgroup',
    'link_prevrecord',
    'log',
    'loop',
    'namespace_using',
    'output_none',
    'portal',
    'private',
    'protect',
    'records',
    'referer',
    'referrer',
    'repeating',
    'resultset',
    'rows',
    'search_args',
    'search_arguments',
    'select',
    'sort_args',
    'sort_arguments',
    'thread_atomic',
    'value_list',
    'while',
    'abort',
    'case',
    'else',
    'if_empty',
    'if_false',
    'if_null',
    'if_true',
    'loop_abort',
    'loop_continue',
    'loop_count',
    'params',
    'params_up',
    'return',
    'return_value',
    'run_children',
    'soap_definetag',
    'soap_lastrequest',
    'soap_lastresponse',
    'tag_name',
    'ascending',
    'average',
    'by',
    'define',
    'descending',
    'do',
    'equals',
    'frozen',
    'group',
    'handle_failure',
    'import',
    'in',
    'into',
    'join',
    'let',
    'match',
    'max',
    'min',
    'on',
    'order',
    'parent',
    'protected',
    'provide',
    'public',
    'require',
    'returnhome',
    'skip',
    'split_thread',
    'sum',
    'take',
    'thread',
    'to',
    'trait',
    'type',
    'where',
    'with',
    'yield',
    'yieldhome',
    'and',
    'or',
    'not',
]

built_in = [
    'array',
    'date',
    'decimal',
    'duration',
    'integer',
    'map',
    'pair',
    'string',
    'tag',
    'xml',
    'null',
    'boolean',
    'bytes',
    'keyword',
    'list',
    'locale',
    'queue',
    'set',
    'stack',
    'staticarray',
    'local',
    'var',
    'variable',
    'global',
    'data',
    'self',
    'inherited',
    'currentcapture',
    'givenblock',
]

meta = [RE(r"\]|\?>")]

meta0 = [RE(r"\[noprocess\]")]

meta1 = [RE(r"\[/noprocess|<\?(lasso(script)?|=)")]

meta2 = [RE(r"\[no_square_brackets")]

meta3 = [RE(r"\[")]

meta4 = [RE(r"^#!.+lasso9\b")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

number = [
    RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)|(infinity|nan)\b"),
]

attr = [RE(r"-(?!infinity)[a-zA-Z_]\w*")]

attr0 = [RE(r"(\.\.\.)")]

symbol = [RE(r"'[a-zA-Z_][a-zA-Z0-9_.]*'")]

class _group7:
    default_text = DELIMITER
    word_groups = [('symbol', symbol)]

keyword0 = ['define']

title = [RE(r"[a-zA-Z_]\w*(=(?!>))?")]

class class0:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0), ('title', title)]
class0.__name__ = 'class'

word_groups = [
    ('literal', literal),
    ('keyword', keyword),
    ('built_in', built_in),
    ('meta', meta),
    ('meta', meta0),
    ('meta', meta1),
    ('meta', meta2),
    ('meta', meta3),
    ('meta', meta4),
    ('number', number),
    ('attr', attr),
    ('attr', attr0),
]

delimited_ranges = [
    ('comment', RE(r"/\*\*!"), [RE(r"\*/")], comment),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('string', RE(r"`"), [RE(r"`")]),
    ('_group6', RE(r"#"), [RE(r"\d+")]),
    ('type', RE(r"::\s*"), [RE(r"[a-zA-Z_][a-zA-Z0-9_.]*")]),
    ('_group7', RE(r"(->|\.\.?)\s*"), [RE(r"\B|\b")], _group7),
    ('class', RE(r"\b(define)"), [RE(r"(?=\(|=>)")], class0),
]
