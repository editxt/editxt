# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: cs.js
name = 'C#'
file_patterns = ['*.cs', '*.csharp']

keyword = [
    'abstract',
    'as',
    'base',
    'bool',
    'break',
    'byte',
    'case',
    'catch',
    'char',
    'checked',
    'const',
    'continue',
    'decimal',
    'dynamic',
    'default',
    'delegate',
    'do',
    'double',
    'else',
    'enum',
    'event',
    'explicit',
    'extern',
    'false',
    'finally',
    'fixed',
    'float',
    'for',
    'foreach',
    'goto',
    'if',
    'implicit',
    'in',
    'int',
    'interface',
    'internal',
    'is',
    'lock',
    'long',
    'null',
    'when',
    'object',
    'operator',
    'out',
    'override',
    'params',
    'private',
    'protected',
    'public',
    'readonly',
    'ref',
    'sbyte',
    'sealed',
    'short',
    'sizeof',
    'stackalloc',
    'static',
    'string',
    'struct',
    'switch',
    'this',
    'true',
    'try',
    'typeof',
    'uint',
    'ulong',
    'unchecked',
    'unsafe',
    'ushort',
    'using',
    'virtual',
    'volatile',
    'void',
    'while',
    'async',
    'protected',
    'public',
    'private',
    'internal',
    'ascending',
    'descending',
    'from',
    'get',
    'group',
    'into',
    'join',
    'let',
    'orderby',
    'partial',
    'select',
    'set',
    'value',
    'var',
    'where',
    'yield',
]

doctag = [RE(r"///")]

doctag0 = [RE(r"<!--|-->")]

doctag1 = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag), ('doctag', doctag0), ('doctag', doctag1)]
    delimited_ranges = [('doctag', RE(r"</?"), [RE(r">")])]

class comment0:
    default_text = DELIMITER
    word_groups = [('doctag', doctag1)]
comment0.__name__ = 'comment'

keyword0 = [
    'if',
    'else',
    'elif',
    'endif',
    'define',
    'undef',
    'warning',
    'error',
    'line',
    'region',
    'endregion',
    'pragma',
    'checksum',
]

class meta:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0)]

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

keyword1 = ['class', 'interface']

title = [RE(r"[a-zA-Z]\w*")]

class _group6:
    default_text = DELIMITER
    word_groups = [('keyword', keyword1), ('title', title)]
    delimited_ranges = [
        ('comment', RE(r"//"), [RE(r"$")], comment0),
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ]

keyword2 = ['namespace']

title0 = [RE(r"[a-zA-Z](\.?\w)*")]

class _group9:
    default_text = DELIMITER
    word_groups = [('keyword', keyword2), ('title', title0)]
    delimited_ranges = [
        ('comment', RE(r"//"), [RE(r"$")], comment0),
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ]

class _group13:
    default_text = DELIMITER
    word_groups = [('title', title)]

class params:
    default_text = DELIMITER
    word_groups = [('keyword', keyword), ('number', number)]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ]

class function:
    default_text = DELIMITER
    word_groups = [('keyword', keyword)]
    delimited_ranges = [
        ('_group13', RE(r"(?=[a-zA-Z]\w*\s*\()"), [RE(r"\B|\b")], _group13),
        ('params', RE(r"\("), [RE(r"(?=\))")], params),
        ('comment', RE(r"//"), [RE(r"$")], comment0),
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ]

word_groups = [('keyword', keyword), ('number', number)]

delimited_ranges = [
    ('comment', RE(r"(?=///)"), [RE(r"$")], comment),
    ('comment', RE(r"//"), [RE(r"$")], comment0),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('meta', RE(r"#"), [RE(r"$")], meta),
    ('string', RE(r"@\""), [RE(r"\"")]),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('_group6', RE(r"\b(class|interface)"), [RE(r"[{;=]")], _group6),
    ('_group9', RE(r"\b(namespace)"), [RE(r"[{;=]")], _group9),
    ('_group12', RE(r"\b(new|return|throw|await)"), [RE(r"\B|\b")]),
    ('function', RE(r"(?=([a-zA-Z]\w*(<[a-zA-Z]\w*>)?\s+)+[a-zA-Z]\w*\s*\()"), [RE(r"(?=[{;=])")], function),
]
