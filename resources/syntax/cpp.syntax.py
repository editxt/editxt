# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: cpp.js
name = 'C++'
file_patterns = ['*.cpp', '*.c', '*.cc', '*.h', '*.c++', '*.h++', '*.hpp']

built_in = """
    std string cin cout cerr clog stdin stdout stderr stringstream
    istringstream ostringstream auto_ptr deque list queue stack vector
    map set bitset multiset multimap unordered_set unordered_map
    unordered_multiset unordered_multimap array shared_ptr abort abs
    acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod
    fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit
    isgraph islower isprint ispunct isspace isupper isxdigit tolower
    toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy
    memset modf pow printf putchar puts scanf sinh sin snprintf sprintf
    sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat
    strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf
    vprintf vsprintf endl initializer_list unique_ptr
    """.split()

keyword = """
    int float while private char catch export virtual operator sizeof
    dynamic_cast typedef const_cast const struct for static_cast union
    namespace unsigned long volatile static protected bool template
    mutable if public friend do goto auto void enum else break extern
    using class asm case typeid short reinterpret_cast default double
    register explicit signed typename try this switch continue inline
    delete alignof constexpr decltype noexcept static_assert
    thread_local restrict _Bool complex _Complex _Imaginary atomic_bool
    atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort
    atomic_int atomic_uint atomic_long atomic_ulong atomic_llong
    atomic_ullong
    """.split()

keyword1 = ('keyword', [RE(r"\b[a-z\d_]*_t\b")])

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

comment0 = ('comment', RE(r"//"), [RE(r"$")], comment)

comment1 = ('comment', RE(r"/\*"), [RE(r"\*/")], comment)

number = ('number', [RE(r"\b(?:\d+(?:\.\d*)?|\.\d+)(?:u|U|l|L|ul|UL|f|F)")])

number0 = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

number1 = ('number', number0)

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

class string:
    default_text_color = DELIMITER
    rules = [operator_escape]

string0 = ('string', RE(r"(?:(?:u8?|U)|L)?\""), [RE(r"\"")], string)

string1 = ('string', RE(r"(?:u8?|U)?R\""), [RE(r"\"")], string)

string2 = ('string', RE(r"'\\?."), [RE(r"'")])

meta_keyword = """
    if else elif endif define undef warning error line pragma ifdef
    ifndef
    """.split()

class string3:
    default_text_color = DELIMITER
    rules = []
string3.__name__ = 'string'

class meta_string:
    default_text_color = DELIMITER
    rules = []
meta_string.__name__ = 'meta-string'

class _group2:
    default_text_color = DELIMITER
    rules = [
        ('meta-keyword', ['include']),
        ('keyword', ['include']),
        ('string', RE(r"(?:(?:u8?|U)|L)?\""), [RE(r"\"")], string3),
        ('meta-string', RE(r"(?:u8?|U)?R\""), [RE(r"\"")], meta_string),
        ('meta-string', RE(r"'\\?."), [RE(r"'")]),
        ('meta-string', RE(r"<"), [RE(r">")]),
    ]

class meta:
    default_text_color = DELIMITER
    rules = [
        ('meta-keyword', meta_keyword),
        # ignore {'begin': {'pattern': '\\\\\\n', 'type': 'RegExp'}, 'relevance': 0},
        ('_group2', RE(r"\b(?:include)"), [RE(r"$")], _group2),
        string0,
        string1,
        string2,
        comment0,
        comment1,
    ]

meta0 = ('meta', RE(r"#"), [RE(r"$")], meta)

class _group3:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', ['true', 'false', 'nullptr', 'NULL']),
        keyword1,
    ]

class _group4:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', ['true', 'false', 'nullptr', 'NULL']),
    ]

class _function0:
    default_text_color = DELIMITER
    rules = [('_function', [RE(r"[{;=]")])]
_function0.__name__ = '_function'

class _group6:
    default_text_color = DELIMITER
    rules = [('title', [RE(r"[a-zA-Z]\w*")])]

class params:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', ['true', 'false', 'nullptr', 'NULL']),
        comment0,
        comment1,
        string0,
        string1,
        string2,
        number,
        number1,
    ]

class function:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', ['true', 'false', 'nullptr', 'NULL']),
        ('_group6', RE(r"(?=[a-zA-Z]\w*\s*\()"), [RE(r"\B|\b")], _group6),
        ('params', RE(r"\("), [RE(r"\)")], params),
        comment0,
        comment1,
        meta0,
    ]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', ['true', 'false', 'nullptr', 'NULL']),
    keyword1,
    comment0,
    comment1,
    number,
    number1,
    string0,
    string1,
    string2,
    meta0,
    ('_group3', RE(r"\b(?:deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\s*<"), [RE(r">")], _group3),
    ('_group4', RE(r"[a-zA-Z]\w*::"), [RE(r"\B\b")], _group4),
    ('_group5', RE(r"\b(?:new|throw|return|else)"), [RE(r"\B\b")]),
    ('function', RE(r"(?=(?:[a-zA-Z]\w*[\*&\s]+)+[a-zA-Z]\w*\s*\()"), [_function0], function),
]

string3.rules.extend(string.rules)
meta_string.rules.extend(string.rules)
