# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: ruby.js
name = 'Ruby'
file_patterns = ['*.ruby', '*.rb', '*.gemspec', '*.podspec', '*.thor', '*.irb']

keyword = """
    and false then defined module in return redo if BEGIN retry end for
    true self when next until do begin unless END rescue nil else break
    undef not super class case require yield alias while ensure elsif or
    include attr_reader attr_writer attr_accessor
    """.split()

doctag = ('doctag', [RE(r"@[A-Za-z]+")])

class comment:
    default_text_color = DELIMITER
    rules = [
        doctag,
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

comment0 = ('comment', RE(r"#"), [RE(r"$")], comment)

comment1 = ('comment', RE(r"^\=begin"), [RE(r"^\=end")], comment)

class comment2:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]
comment2.__name__ = 'comment'

comment3 = ('comment', RE(r"^__END__"), [RE(r"\n$")], comment2)

class _group10:
    default_text_color = DELIMITER
    rules = [('_group1', RE(r"^\s*=>"), [RE(r"\B|\b")])]
_group10.__name__ = '_group1'

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

class subst:
    default_text_color = DELIMITER
    rules = [('keyword', keyword)]

subst0 = ('subst', RE(r"#\{"), [RE(r"}")], subst)

class string:
    default_text_color = DELIMITER
    rules = [operator_escape, subst0]

string1 = ('string', RE(r"'"), [RE(r"'")], string)

string2 = ('string', RE(r"\""), [RE(r"\"")], string)

string3 = ('string', RE(r"`"), [RE(r"`")], string)

string4 = ('string', RE(r"%[qQwWx]?\("), [RE(r"\)")], string)

string5 = ('string', RE(r"%[qQwWx]?\["), [RE(r"\]")], string)

string6 = ('string', RE(r"%[qQwWx]?{"), [RE(r"}")], string)

string7 = ('string', RE(r"%[qQwWx]?<"), [RE(r">")], string)

string8 = ('string', RE(r"%[qQwWx]?/"), [RE(r"/")], string)

string9 = ('string', RE(r"%[qQwWx]?%"), [RE(r"%")], string)

string10 = ('string', RE(r"%[qQwWx]?-"), [RE(r"-")], string)

string11 = ('string', RE(r"%[qQwWx]?\|"), [RE(r"\|")], string)

string12 = ('string', RE(r"\B\?(?:\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b"), [RE(r"\B\b")], string)

_group3 = ('_group3', RE(r"#<"), [RE(r">")])

#class _group4:
#    default_text_color = DELIMITER
#    rules = [
#        # ignore {'begin': '([a-zA-Z]\\w*::)?[a-zA-Z]\\w*'},
#    ]

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['class', 'module']),
        ('title', [RE(r"[A-Za-z_]\w*(?:::\w+)*(?:\?|\!)?")]),
        ('_group4', RE(r"<\s*"), [RE(r"\B\b")]), #, _group4),
        comment0,
        comment1,
        comment3,
    ]
class0.__name__ = 'class'

class1 = ('class', RE(r"\b(?:class|module)"), [RE(r"$|;")], class0)

title0 = [
    RE(r"[a-zA-Z_]\w*[!?=]?|[-+~]\@|<<|>>|=~|===?|<=>|[<>]=?|\*\*|[-/+%^&*~`|]|\[\]=?"),
]

class params:
    default_text_color = DELIMITER
    rules = [('keyword', keyword)]

class params1:
    default_text_color = DELIMITER
    rules = [('params', RE(r"\("), [RE(r"\)")], params)]
params1.__name__ = 'params'

class function:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['def']),
        ('title', title0),
        comment0,
        comment1,
        comment3,
    ]

function0 = ('function', RE(r"\b(?:def)"), [RE(r"$|;"), params1], function)

symbol = ('symbol', [RE(r"[a-zA-Z_]\w*(?:\!|\?)?:")])

class symbol0:
    default_text_color = DELIMITER
    rules = [
        string1,
        string2,
        string3,
        string4,
        string5,
        string6,
        string7,
        string8,
        string9,
        string10,
        string11,
        string12,
        # ignore {'begin': '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?'},
    ]
symbol0.__name__ = 'symbol'

symbol1 = ('symbol', RE(r":"), [RE(r"\B\b")], symbol0)

number = [
    RE(r"(?:\b0[0-7_]+)|(?:\b0x[0-9a-fA-F_]+)|(?:\b[1-9][0-9_]*(?:\.[0-9_]+)?)|[0_]\b"),
]

number0 = ('number', number)

class regexp:
    default_text_color = DELIMITER
    rules = [operator_escape, subst0]

class _group8:
    default_text_color = DELIMITER
    rules = [
        _group3,
        ('regexp', RE(r"/"), [RE(r"/[a-z]*")], regexp),
        ('regexp', RE(r"%r{"), [RE(r"}[a-z]*")], regexp),
        ('regexp', RE(r"%r\("), [RE(r"\)[a-z]*")], regexp),
        ('regexp', RE(r"%r!"), [RE(r"![a-z]*")], regexp),
        ('regexp', RE(r"%r\["), [RE(r"\][a-z]*")], regexp),
        comment0,
        comment1,
        comment3,
    ]

_group80 = ('_group8', RE(r"(?:!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~)\s*"), [RE(r"\B\b")], _group8)

class _group2:
    default_text_color = DELIMITER
    rules = [
        string1,
        string2,
        string3,
        string4,
        string5,
        string6,
        string7,
        string8,
        string9,
        string10,
        string11,
        string12,
        _group3,
        class1,
        function0,
        symbol,
        symbol1,
        number0,
        # ignore {'begin': '(\\$\\W)|((\\$|\\@\\@?)(\\w+))'},
        _group80,
        comment0,
        comment1,
        comment3,
    ]

class meta0:
    default_text_color = DELIMITER
    rules = [
        ('meta', RE(r"^(?:[>?]>|[\w#]+\(\w+\):\d+:\d+>|(?:\w+-)?\d+\.\d+\.\d(?:p\d+)?[^>]+>)"), [RE(r"\B|\b")]),
    ]
meta0.__name__ = 'meta'

class _group9:
    default_text_color = DELIMITER
    rules = []

rules = [
    ('keyword', keyword),
    comment0,
    comment1,
    comment3,
    ('_group1', _group10, [RE(r"$")], _group2),
    ('meta', meta0, [RE(r"$")], _group9),
    string1,
    string2,
    string3,
    string4,
    string5,
    string6,
    string7,
    string8,
    string9,
    string10,
    string11,
    string12,
    _group3,
    class1,
    function0,
    symbol,
    symbol1,
    number0,
    # ignore {'begin': '(\\$\\W)|((\\$|\\@\\@?)(\\w+))'},
    _group80,
    comment0,
    comment1,
    comment3,
]

subst.rules.extend(_group2.rules)
params.rules.extend(_group2.rules)
_group9.rules.extend(_group2.rules)
