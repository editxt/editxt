# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: php.js
name = 'PHP'
file_patterns = ['*.php', '*.php3', '*.php4', '*.php5', '*.php6']

flags = re.IGNORECASE | re.MULTILINE

keyword = [
    'and',
    'include_once',
    'list',
    'abstract',
    'global',
    'private',
    'echo',
    'interface',
    'as',
    'static',
    'endswitch',
    'array',
    'null',
    'if',
    'endwhile',
    'or',
    'const',
    'for',
    'endforeach',
    'self',
    'var',
    'while',
    'isset',
    'public',
    'protected',
    'exit',
    'foreach',
    'throw',
    'elseif',
    'include',
    '__FILE__',
    'empty',
    'require_once',
    'do',
    'xor',
    'return',
    'parent',
    'clone',
    'use',
    '__CLASS__',
    '__LINE__',
    'else',
    'break',
    'print',
    'eval',
    'new',
    'catch',
    '__METHOD__',
    'case',
    'exception',
    'default',
    'die',
    'require',
    '__FUNCTION__',
    'enddeclare',
    'final',
    'try',
    'switch',
    'continue',
    'endfor',
    'endif',
    'declare',
    'unset',
    'true',
    'false',
    'trait',
    'goto',
    'instanceof',
    'insteadof',
    '__DIR__',
    '__NAMESPACE__',
    'yield',
    'finally',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

doctag0 = [RE(r"@[A-Za-z]+")]

meta = [RE(r"<\?(php)?|\?>")]

class comment0:
    default_text = DELIMITER
    word_groups = [('doctag', doctag0), ('meta', meta), ('doctag', doctag)]
comment0.__name__ = 'comment'

keyword0 = ['__halt_compiler']

class comment1:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0), ('doctag', doctag)]
comment1.__name__ = 'comment'

subst = [RE(r"\$\w+")]

class string:
    default_text = DELIMITER
    word_groups = [('subst', subst)]
    delimited_ranges = [('subst', RE(r"\{\$"), [RE(r"\}")])]

keyword1 = ['function']

title = [RE(r"[a-zA-Z_]\w*")]

class string0:
    default_text = DELIMITER
    word_groups = [('meta', meta)]
string0.__name__ = 'string'

number = [RE(r"\b(0b[01]+)")]

number0 = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

class params:
    default_text = DELIMITER
    word_groups = [('number', number), ('number', number0)]
    delimited_ranges = [
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
        ('string', RE(r"b\""), [RE(r"\"")], string0),
        ('string', RE(r"b'"), [RE(r"'")], string0),
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
    ]

class function:
    default_text = DELIMITER
    word_groups = [('keyword', keyword1), ('title', title)]
    delimited_ranges = [('params', RE(r"\("), [RE(r"\)")], params)]

keyword2 = ['class', 'interface']

class class0:
    default_text = DELIMITER
    word_groups = [('keyword', keyword2), ('title', title)]
    delimited_ranges = [('_group13', RE(r"\b(extends|implements)"), [RE(r"\B|\b")])]
class0.__name__ = 'class'

keyword3 = ['namespace']

class _group14:
    default_text = DELIMITER
    word_groups = [('keyword', keyword3), ('title', title)]

keyword4 = ['use']

class _group15:
    default_text = DELIMITER
    word_groups = [('keyword', keyword4), ('title', title)]

word_groups = [
    ('keyword', keyword),
    ('meta', meta),
    ('number', number),
    ('number', number0),
]

delimited_ranges = [
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('comment', RE(r"__halt_compiler.+?;"), [RE(r"")], comment1),
    ('string', RE(r"<<<['\"]?\w+['\"]?$"), [RE(r"^\w+;?$")], string),
    ('function', RE(r"\b(function)"), [RE(r"(?=[;{])")], function),
    ('class', RE(r"\b(class|interface)"), [RE(r"(?={)")], class0),
    ('_group14', RE(r"\b(namespace)"), [RE(r";")], _group14),
    ('_group15', RE(r"\b(use)"), [RE(r";")], _group15),
    ('string', RE(r"b\""), [RE(r"\"")], string0),
    ('string', RE(r"b'"), [RE(r"'")], string0),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")]),
]
