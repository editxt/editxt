# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: livescript.js
name = 'LiveScript'
file_patterns = ['*.livescript', '*.ls']

built_in = """
    npm require console print module global window document
    """.split()

keyword = """
    in if for while finally new do return else break catch instanceof
    throw try this switch continue typeof delete debugger case default
    function var with then unless until loop of by when and or is isnt
    not it that otherwise from to til fallthrough super case default
    function var void const let enum export import native __hasProp
    __extends __slice __bind __indexOf
    """.split()

literal = """
    true false null undefined yes no on off it that void
    """.split()

number = [RE(r"\b(?:0b[01]+)")]

class number0:
    default_text_color = DELIMITER
    rules = [
        ('number', RE(r"(?:\b0[xX][a-fA-F0-9_]+)|(?:\b\d(?:\d|_\d)*(?:\.(?:\d(?:\d|_\d)*)?)?(?:_*[eE](?:[-+]\d(?:_\d|\d)*)?)?[_a-z]*)"), [RE(r"\B|\b")]),
    ]
number0.__name__ = 'number'

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class regexp:
    default_text_color = DELIMITER
    rules = [
        None,  # string0.rules[0],
        ('comment', RE(r"#"), [RE(r"$")], comment),
    ]

regexp0 = [RE(r"\/(?![ *])(?:\\\/|.)*?\/[gim]*(?=\W|$)")]

class subst:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('number', number),
        None,  # rules[4],
        None,  # rules[5],
        None,  # rules[6],
        None,  # rules[7],
        None,  # rules[8],
        None,  # rules[9],
        ('regexp', RE(r"//"), [RE(r"//[gim]*")], regexp),
        ('regexp', regexp0),
        # ignore {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
        ('_group1', RE(r"``"), [RE(r"``")], 'javascript'),
    ]

class subst0:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
    ]
subst0.__name__ = 'subst'

class string0:
    default_text_color = DELIMITER
    rules = [
        # ('contains', 2, 'variants', 0, 'contains', 0) {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        ('subst', RE(r"#\{"), [RE(r"}")], subst),
        ('subst', RE(r"#[A-Za-z$_]"), [RE(r"(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*")], subst0),
    ]
string0.__name__ = 'string'

class string1:
    default_text_color = DELIMITER
    rules = [
        # ('contains', 2, 'variants', 0, 'contains', 0) {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        string0.rules[0],
        string0.rules[1],
    ]
string1.__name__ = 'string'

class _string:
    default_text_color = DELIMITER
    rules = [('_string', [RE(r"(?:\s|$)")])]

title = [RE(r"[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*")]

class _group2:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('number', number),
        None,  # rules[4],
        None,  # rules[5],
        None,  # rules[6],
        None,  # rules[7],
        None,  # rules[8],
        None,  # rules[9],
        subst.rules[10],
        subst.rules[11],
        # ('contains', 2, 'variants', 2, 'contains', 1, 'contains', 4) {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
        subst.rules[12],
    ]

class params:
    default_text_color = DELIMITER
    rules = [('_group2', RE(r"\("), [RE(r"\)")], _group2)]

class function:
    default_text_color = DELIMITER
    rules = [
        ('title', title),
        ('params', RE(r"(?=\()"), [RE(r"\B\b")], params),
    ]

class _group3:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('number', number),
        None,  # rules[4],
        None,  # rules[5],
        None,  # rules[6],
        None,  # rules[7],
        None,  # rules[8],
        None,  # rules[9],
        subst.rules[10],
        subst.rules[11],
        # ('contains', 2, 'variants', 2, 'contains', 1, 'contains', 4) {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
        subst.rules[12],
    ]

class params0:
    default_text_color = DELIMITER
    rules = [('_group3', RE(r"\("), [RE(r"\)")], _group3)]
params0.__name__ = 'params'

class function0:
    default_text_color = DELIMITER
    rules = [
        ('title', title),
        ('params', RE(r"(?=\()"), [RE(r"\B\b")], params0),
    ]
function0.__name__ = 'function'

class _group4:
    default_text_color = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        ('number', number),
        None,  # rules[4],
        None,  # rules[5],
        None,  # rules[6],
        None,  # rules[7],
        None,  # rules[8],
        None,  # rules[9],
        subst.rules[10],
        subst.rules[11],
        # ('contains', 2, 'variants', 2, 'contains', 1, 'contains', 4) {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
        subst.rules[12],
    ]

class params1:
    default_text_color = DELIMITER
    rules = [('_group4', RE(r"\("), [RE(r"\)")], _group4)]
params1.__name__ = 'params'

class function1:
    default_text_color = DELIMITER
    rules = [
        ('title', title),
        ('params', RE(r"(?=\()"), [RE(r"\B\b")], params1),
    ]
function1.__name__ = 'function'

keyword0 = ['class']

keyword1 = ['extends']

class _group5:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword1),
        None,  # ('title', title),
    ]

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword0),
        ('_group5', RE(r"\b(?:extends)"), [RE(r"\B\b")], _group5),
        None,  # ('title', title),
    ]
class0.__name__ = 'class'

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('number', number),
    ('number', number0, [RE(r"(?:\s*/)?")]),
    ('string', RE(r"'''"), [RE(r"'''")], string),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")], string0),
    ('string', RE(r"\""), [RE(r"\"")], string1),
    ('string', RE(r"\\"), [_string]),
    subst.rules[10],
    subst.rules[11],
    # ('contains', 2, 'variants', 2, 'contains', 1, 'contains', 4) {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
    subst.rules[12],
    ('comment', RE(r"\/\*"), [RE(r"\*\/")], comment),
    regexp.rules[1],
    ('function', RE(r"(?=(?:[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*\s*(?:=|:=)\s*)?(?:\(.*\))?\s*\B\->\*?)"), [RE(r"\->\*?")], function),
    ('function', RE(r"(?=(?:[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*\s*(?:=|:=)\s*)?!?(?:\(.*\))?\s*\B[-~]{1,2}>\*?)"), [RE(r"[-~]{1,2}>\*?")], function0),
    ('function', RE(r"(?=(?:[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*\s*(?:=|:=)\s*)?(?:\(.*\))?\s*\B!?[-~]{1,2}>\*?)"), [RE(r"!?[-~]{1,2}>\*?")], function1),
    ('class', RE(r"\b(?:class)"), [RE(r"$")], class0),
    ('_group6', RE(r"(?=[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*:)"), [RE(r"(?=:)")]),
]

regexp.rules[0] = string0.rules[0]
subst.rules[4] = rules[4]
subst.rules[5] = rules[5]
subst.rules[6] = rules[6]
subst.rules[7] = rules[7]
subst.rules[8] = rules[8]
subst.rules[9] = rules[9]
_group2.rules[4] = rules[4]
_group2.rules[5] = rules[5]
_group2.rules[6] = rules[6]
_group2.rules[7] = rules[7]
_group2.rules[8] = rules[8]
_group2.rules[9] = rules[9]
_group3.rules[4] = rules[4]
_group3.rules[5] = rules[5]
_group3.rules[6] = rules[6]
_group3.rules[7] = rules[7]
_group3.rules[8] = rules[8]
_group3.rules[9] = rules[9]
_group4.rules[4] = rules[4]
_group4.rules[5] = rules[5]
_group4.rules[6] = rules[6]
_group4.rules[7] = rules[7]
_group4.rules[8] = rules[8]
_group4.rules[9] = rules[9]
_group5.rules[1] = ('title', title)
class0.rules[2] = ('title', title)
