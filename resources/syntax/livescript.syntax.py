# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: livescript.js
name = 'LiveScript'
file_patterns = ['*.livescript', '*.ls']

built_in = [
    'npm',
    'require',
    'console',
    'print',
    'module',
    'global',
    'window',
    'document',
]

keyword = [
    'in',
    'if',
    'for',
    'while',
    'finally',
    'new',
    'do',
    'return',
    'else',
    'break',
    'catch',
    'instanceof',
    'throw',
    'try',
    'this',
    'switch',
    'continue',
    'typeof',
    'delete',
    'debugger',
    'case',
    'default',
    'function',
    'var',
    'with',
    'then',
    'unless',
    'until',
    'loop',
    'of',
    'by',
    'when',
    'and',
    'or',
    'is',
    'isnt',
    'not',
    'it',
    'that',
    'otherwise',
    'from',
    'to',
    'til',
    'fallthrough',
    'super',
    'case',
    'default',
    'function',
    'var',
    'void',
    'const',
    'let',
    'enum',
    'export',
    'import',
    'native',
    '__hasProp',
    '__extends',
    '__slice',
    '__bind',
    '__indexOf',
]

literal = [
    'true',
    'false',
    'null',
    'undefined',
    'yes',
    'no',
    'on',
    'off',
    'it',
    'that',
    'void',
]

number = [RE(r"\b(0b[01]+)")]

class number0:
    default_text = DELIMITER
    rules = [
        ('number', RE(r"(\b0[xX][a-fA-F0-9_]+)|(\b\d(\d|_\d)*(\.(\d(\d|_\d)*)?)?(_*[eE]([-+]\d(_\d|\d)*)?)?[_a-z]*)"), [RE(r"\B|\b")]),
    ]
number0.__name__ = 'number'

class _group0:
    default_text = DELIMITER
    rules = []

class string:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
    ]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class regexp:
    default_text = DELIMITER
    rules = [
        # {'className': 'subst', 'begin': {'type': 'RegExp', 'pattern': '#\\{'}, 'end': {'type': 'RegExp', 'pattern': '}'}},
        ('comment', RE(r"#"), [RE(r"$")], comment),
    ]

regexp0 = [RE(r"\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)")]

class subst:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        None,  # ('number', number),
        None,  # rules[4],
        # {'className': 'string'},
        ('regexp', RE(r"//"), [RE(r"//[gim]*")], regexp),
        ('regexp', regexp0),
        ('_group2', RE(r"``"), [RE(r"(?=``)")], 'javascript'),
    ]

class subst0:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
    ]
subst0.__name__ = 'subst'

class string0:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
        ('subst', RE(r"#\{"), [RE(r"}")], subst),
        ('subst', RE(r"#[A-Za-z$_]"), [RE(r"(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*")], subst0),
    ]
string0.__name__ = 'string'

class string1:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
        None,  # string0.rules[0],
        None,  # string0.rules[1],
    ]
string1.__name__ = 'string'

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'type': 'RegExp', 'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b"}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

title = [RE(r"[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*")]

class _group3:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        None,  # ('number', number),
        None,  # rules[4],
        None,  # rules[9],
        None,  # ('regexp', regexp0),
        # {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
        None,  # subst.rules[7],
    ]

class params:
    default_text = DELIMITER
    rules = [('_group3', RE(r"\("), [RE(r"\)")], _group3)]

class function:
    default_text = DELIMITER
    rules = [
        ('title', title),
        ('params', RE(r"(?=\()"), [RE(r"\B|\b")], params),
    ]

class _group4:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        None,  # ('number', number),
        None,  # rules[4],
        None,  # rules[9],
        None,  # ('regexp', regexp0),
        # {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
        None,  # subst.rules[7],
    ]

class params0:
    default_text = DELIMITER
    rules = [('_group4', RE(r"\("), [RE(r"\)")], _group4)]
params0.__name__ = 'params'

class function0:
    default_text = DELIMITER
    rules = [
        ('title', title),
        ('params', RE(r"(?=\()"), [RE(r"\B|\b")], params0),
    ]
function0.__name__ = 'function'

class _group5:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        None,  # ('number', number),
        None,  # rules[4],
        None,  # rules[9],
        None,  # ('regexp', regexp0),
        # {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
        None,  # subst.rules[7],
    ]

class params1:
    default_text = DELIMITER
    rules = [('_group5', RE(r"\("), [RE(r"\)")], _group5)]
params1.__name__ = 'params'

class function1:
    default_text = DELIMITER
    rules = [
        ('title', title),
        ('params', RE(r"(?=\()"), [RE(r"\B|\b")], params1),
    ]
function1.__name__ = 'function'

keyword0 = ['class']

keyword1 = ['extends']

class _group6:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword1),
        None,  # ('title', title),
    ]

class class0:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        ('_group6', RE(r"\b(extends)"), [RE(r"")], _group6),
        None,  # ('title', title),
    ]
class0.__name__ = 'class'

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('number', number),
    ('number', number0, [RE(r"(\s*/)?")], _group0),
    ('string', RE(r"'''"), [RE(r"'''")]),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")], string0),
    ('string', RE(r"\""), [RE(r"\"")], string1),
    ('string', RE(r"\\"), [RE(r"(?=(\s|$))")]),
    None,  # ('regexp', regexp0),
    # {'begin': '@[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*'},
    None,  # subst.rules[7],
    ('comment', RE(r"\/\*"), [RE(r"\*\/")], comment0),
    None,  # regexp.rules[0],
    ('function', RE(r"(?=([A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*\s*(?:=|:=)\s*)?(\(.*\))?\s*\B\->\*?)"), [RE(r"\->\*?")], function),
    ('function', RE(r"(?=([A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*\s*(?:=|:=)\s*)?!?(\(.*\))?\s*\B[-~]{1,2}>\*?)"), [RE(r"[-~]{1,2}>\*?")], function0),
    ('function', RE(r"(?=([A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*\s*(?:=|:=)\s*)?(\(.*\))?\s*\B!?[-~]{1,2}>\*?)"), [RE(r"!?[-~]{1,2}>\*?")], function1),
    ('class', RE(r"\b(class)"), [RE(r"$")], class0),
    ('_group7', RE(r"(?=[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*:)"), [RE(r"(?=:)")]),
]

subst.rules[3] = ('number', number)
subst.rules[4] = rules[4]
string1.rules[0] = string0.rules[0]
string1.rules[1] = string0.rules[1]
rules[10] = ('regexp', regexp0)
rules[11] = subst.rules[7]
rules[13] = regexp.rules[0]
_group3.rules[3] = ('number', number)
_group3.rules[4] = rules[4]
_group3.rules[5] = rules[9]
_group3.rules[6] = ('regexp', regexp0)
_group3.rules[7] = subst.rules[7]
_group4.rules[3] = ('number', number)
_group4.rules[4] = rules[4]
_group4.rules[5] = rules[9]
_group4.rules[6] = ('regexp', regexp0)
_group4.rules[7] = subst.rules[7]
_group5.rules[3] = ('number', number)
_group5.rules[4] = rules[4]
_group5.rules[5] = rules[9]
_group5.rules[6] = ('regexp', regexp0)
_group5.rules[7] = subst.rules[7]
_group6.rules[1] = ('title', title)
class0.rules[2] = ('title', title)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
