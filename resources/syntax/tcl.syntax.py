# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: tcl.js
name = 'Tcl'
file_patterns = ['*.tcl', '*.tk']

keyword = """
    after append apply array auto_execok auto_import auto_load
    auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary
    break catch cd chan clock close concat continue dde dict encoding
    eof error eval exec exit expr fblocked fconfigure fcopy file
    fileevent filename flush for foreach format gets glob global history
    http if incr info interp join lappend lassign lindex linsert list
    llength load lrange lrepeat lreplace lreverse lsearch lset lsort
    mathfunc mathop memory msgcat namespace open package parray pid
    pkg::create pkg_mkIndex platform platform::shell proc puts pwd read
    refchan regexp registry regsub rename return safe scan seek set
    socket source split string subst switch tcl_endOfWord
    tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord
    tcl_wordBreakAfter tcl_wordBreakBefore tcltest tclvars tell time tm
    trace unknown unload unset update uplevel upvar variable vwait while
    """.split()

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

class _title:
    default_text_color = DELIMITER
    rules = [('title', [RE(r"[ \t\n\r]")])]

class _group1:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['proc']),
        ('title', RE(r"[ \t\n\r]+(?:::)?[a-zA-Z_](?:(?:::)?[a-zA-Z0-9_])*"), [_title]),
    ]

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

class string:
    default_text_color = DELIMITER
    rules = [operator_escape]

number0 = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

rules = [
    ('keyword', keyword),
    ('comment', RE(r";[ \t]*#"), [RE(r"$")], comment),
    ('comment', RE(r"^[ \t]*#"), [RE(r"$")], comment),
    ('_group1', RE(r"\b(?:proc)"), [RE(r"[\{]")], _group1),
    ('_group2', RE(r"\$(?:\{)?(?:::)?[a-zA-Z_](?:(?:::)?[a-zA-Z0-9_])*\((?:[a-zA-Z0-9_])*\)"), [RE(r"[^a-zA-Z0-9_\}\$]")]),
    ('_group3', RE(r"\$(?:\{)?(?:::)?[a-zA-Z_](?:(?:::)?[a-zA-Z0-9_])*"), [RE(r"(?:\))?[^a-zA-Z0-9_\}\$]")]),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('number', [RE(r"\b(?:0b[01]+)")]),
    ('number', number0),
]
