# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: tcl.js
name = 'Tcl'
file_patterns = ['*.tcl', '*.tk']

keyword = [
    'after',
    'append',
    'apply',
    'array',
    'auto_execok',
    'auto_import',
    'auto_load',
    'auto_mkindex',
    'auto_mkindex_old',
    'auto_qualify',
    'auto_reset',
    'bgerror',
    'binary',
    'break',
    'catch',
    'cd',
    'chan',
    'clock',
    'close',
    'concat',
    'continue',
    'dde',
    'dict',
    'encoding',
    'eof',
    'error',
    'eval',
    'exec',
    'exit',
    'expr',
    'fblocked',
    'fconfigure',
    'fcopy',
    'file',
    'fileevent',
    'filename',
    'flush',
    'for',
    'foreach',
    'format',
    'gets',
    'glob',
    'global',
    'history',
    'http',
    'if',
    'incr',
    'info',
    'interp',
    'join',
    'lappend',
    'lassign',
    'lindex',
    'linsert',
    'list',
    'llength',
    'load',
    'lrange',
    'lrepeat',
    'lreplace',
    'lreverse',
    'lsearch',
    'lset',
    'lsort',
    'mathfunc',
    'mathop',
    'memory',
    'msgcat',
    'namespace',
    'open',
    'package',
    'parray',
    'pid',
    'pkg::create',
    'pkg_mkIndex',
    'platform',
    'platform::shell',
    'proc',
    'puts',
    'pwd',
    'read',
    'refchan',
    'regexp',
    'registry',
    'regsub',
    'rename',
    'return',
    'safe',
    'scan',
    'seek',
    'set',
    'socket',
    'source',
    'split',
    'string',
    'subst',
    'switch',
    'tcl_endOfWord',
    'tcl_findLibrary',
    'tcl_startOfNextWord',
    'tcl_startOfPreviousWord',
    'tcl_wordBreakAfter',
    'tcl_wordBreakBefore',
    'tcltest',
    'tclvars',
    'tell',
    'time',
    'tm',
    'trace',
    'unknown',
    'unload',
    'unset',
    'update',
    'uplevel',
    'upvar',
    'variable',
    'vwait',
    'while',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

keyword0 = ['proc']

class _group2:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0)]
    delimited_ranges = [
        ('title', RE(r"[ \t\n\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*"), [RE(r"(?=[ \t\n\r])")]),
    ]

number = [RE(r"\b(0b[01]+)")]

number0 = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

word_groups = [('keyword', keyword), ('number', number), ('number', number0)]

delimited_ranges = [
    ('comment', RE(r";[ \t]*#"), [RE(r"$")], comment),
    ('comment', RE(r"^[ \t]*#"), [RE(r"$")], comment),
    ('_group2', RE(r"\b(proc)"), [RE(r"(?=[\{])")], _group2),
    ('_group3', RE(r"\$(\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\(([a-zA-Z0-9_])*\)"), [RE(r"(?=[^a-zA-Z0-9_\}\$])")]),
    ('_group4', RE(r"\$(\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*"), [RE(r"(?=(\))?[^a-zA-Z0-9_\}\$])")]),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")]),
]
