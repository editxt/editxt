# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: mizar.js
name = 'Mizar'
file_patterns = ['*.mizar']

keyword = [
    'environ',
    'vocabularies',
    'notations',
    'constructors',
    'definitions',
    'registrations',
    'theorems',
    'schemes',
    'requirements',
    'begin',
    'end',
    'definition',
    'registration',
    'cluster',
    'existence',
    'pred',
    'func',
    'defpred',
    'deffunc',
    'theorem',
    'proof',
    'let',
    'take',
    'assume',
    'then',
    'thus',
    'hence',
    'ex',
    'for',
    'st',
    'holds',
    'consider',
    'reconsider',
    'such',
    'that',
    'and',
    'in',
    'provided',
    'of',
    'as',
    'from',
    'be',
    'being',
    'by',
    'means',
    'equals',
    'implies',
    'iff',
    'redefine',
    'define',
    'now',
    'not',
    'or',
    'attr',
    'is',
    'mode',
    'suppose',
    'per',
    'cases',
    'set',
    'thesis',
    'contradiction',
    'scheme',
    'reserve',
    'struct',
    'correctness',
    'compatibility',
    'coherence',
    'symmetry',
    'assymetry',
    'reflexivity',
    'irreflexivity',
    'connectedness',
    'uniqueness',
    'commutativity',
    'idempotence',
    'involutiveness',
    'projectivity',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

rules = [('keyword', keyword), ('comment', RE(r"::"), [RE(r"$")], comment)]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
