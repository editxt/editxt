# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: nginx.js
name = 'Nginx'
file_patterns = ['*.nginx', '*.nginxconf']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

section = [RE(r"[a-zA-Z_]\w*")]

class _group0:
    default_text_color = DELIMITER
    rules = [('section', section)]

class attribute:
    default_text_color = DELIMITER
    rules = [('attribute', RE(r"[a-zA-Z_]\w*"), [RE(r"\B|\b")])]

literal = """
    on off yes no true false none blocked debug info notice warn error
    crit select break last permanent redirect kqueue rtsig epoll poll
    /dev/poll
    """.split()

variable = [RE(r"\$\d+")]

variable0 = [RE(r"[\$\@][a-zA-Z_]\w*")]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        ('variable', variable),
        ('variable', RE(r"\$\{"), [RE(r"}")]),
        ('variable', variable0),
    ]

class _group3:
    default_text_color = DELIMITER
    rules = [
        None,  # string.rules[0],
        None,  # string.rules[1],
        None,  # string.rules[2],
    ]

class regexp:
    default_text_color = DELIMITER
    rules = [
        # ('contains', 2, 'contains', 0, 'starts', 'contains', 1, 'contains', 0) {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        None,  # string.rules[0],
        None,  # string.rules[1],
        None,  # string.rules[2],
    ]

number = [RE(r"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?::\d{1,5})?\b")]

number0 = [RE(r"\b\d+[kKmMgGdshdwy]*\b")]

class _group2:
    default_text_color = DELIMITER
    rules = [
        ('literal', literal),
        None,  # rules[0],
        ('string', RE(r"\""), [RE(r"\"")], string),
        ('string', RE(r"'"), [RE(r"'")], string),
        ('_group3', RE(r"(?:[a-z]+):/"), [RE(r"\s")], _group3),
        ('regexp', RE(r"\s\^"), [RE(r"(?=\s|{|;)")], regexp),
        ('regexp', RE(r"~\*?\s+"), [RE(r"(?=\s|{|;)")], regexp),
        ('regexp', RE(r"\*(?:\.[a-z\-]+)+"), [RE(r"\B\b")], regexp),
        ('regexp', RE(r"(?:[a-z\-]+\.)+\*"), [RE(r"\B\b")], regexp),
        ('number', number),
        ('number', number0),
        None,  # string.rules[0],
        None,  # string.rules[1],
        None,  # string.rules[2],
    ]

class _group1:
    default_text_color = DELIMITER
    rules = [('attribute', attribute, [RE(r"\B\b")], _group2)]

rules = [
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('_group0', RE(r"(?=[a-zA-Z_]\w*\s+{)"), [RE(r"{")], _group0),
    ('_group1', RE(r"(?=[a-zA-Z_]\w*\s)"), [RE(r";|{")], _group1),
]

_group3.rules[0] = string.rules[0]
_group3.rules[1] = string.rules[1]
_group3.rules[2] = string.rules[2]
regexp.rules[0] = string.rules[0]
regexp.rules[1] = string.rules[1]
regexp.rules[2] = string.rules[2]
_group2.rules[1] = rules[0]
_group2.rules[11] = string.rules[0]
_group2.rules[12] = string.rules[1]
_group2.rules[13] = string.rules[2]
