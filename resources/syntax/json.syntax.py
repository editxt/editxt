# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: json.js
name = 'JSON'
file_patterns = ['*.json']

literal = ['true', 'false', 'null']

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

class attr:
    default_text = DELIMITER
    delimited_ranges = [('attr', RE(r"\s*\""), [RE(r"(?=\"\s*:\s*)")])]

class _group7:
    default_text = DELIMITER
    word_groups = [('literal', literal), ('number', number)]
    delimited_ranges = [
        ('string', RE(r"\""), [RE(r"\"")]),
        ('_group9', RE(r"{"), [RE(r"}")]),
        ('_group10', RE(r"\["), [RE(r"\]")]),
    ]

class _group6:
    default_text = DELIMITER
    delimited_ranges = [('_group7', RE(r"\B|\b"), [RE(r"(?=,)")], _group7)]

class _group3:
    default_text = DELIMITER
    word_groups = [('literal', literal), ('number', number)]
    delimited_ranges = [
        ('string', RE(r"\""), [RE(r"\"")]),
        ('_group5', RE(r"{"), [RE(r"}")]),
        ('_group6', RE(r"\["), [RE(r"\]")], _group6),
    ]

class _group1:
    default_text = DELIMITER
    delimited_ranges = [('attr', attr, [RE(r"(?=})")], _group3)]

class _group16:
    default_text = DELIMITER
    word_groups = [('literal', literal), ('number', number)]
    delimited_ranges = [
        ('string', RE(r"\""), [RE(r"\"")]),
        ('_group18', RE(r"{"), [RE(r"}")]),
        ('_group19', RE(r"\["), [RE(r"\]")]),
    ]

class _group14:
    default_text = DELIMITER
    delimited_ranges = [('attr', attr, [RE(r"(?=})")], _group16)]

class _group12:
    default_text = DELIMITER
    word_groups = [('literal', literal), ('number', number)]
    delimited_ranges = [
        ('string', RE(r"\""), [RE(r"\"")]),
        ('_group14', RE(r"{"), [RE(r"}")], _group14),
        ('_group20', RE(r"\["), [RE(r"\]")]),
    ]

class _group11:
    default_text = DELIMITER
    delimited_ranges = [('_group12', RE(r"\B|\b"), [RE(r"(?=,)")], _group12)]

word_groups = [('literal', literal), ('number', number)]

delimited_ranges = [
    ('string', RE(r"\""), [RE(r"\"")]),
    ('_group1', RE(r"{"), [RE(r"}")], _group1),
    ('_group11', RE(r"\["), [RE(r"\]")], _group11),
]
