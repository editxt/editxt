# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: json.js
name = 'JSON'
file_patterns = ['*.json']

literal = ['true', 'false', 'null']

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

class attr:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
    ]

class attr0:
    default_text = DELIMITER
    rules = [('attr', RE(r"\s*\""), [RE(r"(?=\"\s*:\s*)")], attr)]
attr0.__name__ = 'attr'

class _group2:
    default_text = DELIMITER
    rules = [('literal', literal)]

class _group1:
    default_text = DELIMITER
    rules = [('attr', attr0, [RE(r"(?=,)")], _group2)]

class _group4:
    default_text = DELIMITER
    rules = [('literal', literal)]

class _group3:
    default_text = DELIMITER
    rules = [('_group4', RE(r"\B|\b"), [RE(r"(?=,)")], _group4)]

rules = [
    ('literal', literal),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('number', number),
    ('_group1', RE(r"{"), [RE(r"}")], _group1),
    ('_group3', RE(r"\["), [RE(r"\]")], _group3),
]

_group2.rules.extend(rules)
_group4.rules.extend(rules)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
