# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: haxe.js
name = 'Haxe'
file_patterns = ['*.haxe', '*.hx']

keyword = """
    break callback case cast catch class continue default do dynamic
    else enum extends extern for function here if implements import in
    inline interface never new override package private public return
    static super switch this throw trace try typedef untyped using var
    while
    """.split()

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

class string:
    default_text_color = DELIMITER
    rules = [operator_escape]

string0 = ('string', RE(r"'"), [RE(r"'")], string)

string1 = ('string', RE(r"\""), [RE(r"\"")], string)

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

comment0 = ('comment', RE(r"//"), [RE(r"$")], comment)

comment1 = ('comment', RE(r"/\*"), [RE(r"\*/")], comment)

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

class _class0:
    default_text_color = DELIMITER
    rules = [('_class', [RE(r"{")])]
_class0.__name__ = '_class'

title = ('title', [RE(r"[a-zA-Z]\w*")])

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['class', 'interface']),
        ('_group1', RE(r"\b(?:extends|implements)"), [RE(r"\B\b")]),
        title,
    ]
class0.__name__ = 'class'

class meta:
    default_text_color = DELIMITER
    rules = [('meta-keyword', ['if', 'else', 'elseif', 'end', 'error'])]

class _function0:
    default_text_color = DELIMITER
    rules = [('_function', [RE(r"[{;]")])]
_function0.__name__ = '_function'

class params:
    default_text_color = DELIMITER
    rules = [string0, string1, comment0, comment1]

class function:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['function']),
        title,
        ('params', RE(r"\("), [RE(r"\)")], params),
        # ignore {'begin': ':\\s*([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)'},
    ]

rules = [
    ('keyword', keyword),
    ('literal', ['true', 'false', 'null']),
    string0,
    string1,
    comment0,
    comment1,
    ('number', number),
    ('class', RE(r"\b(?:class|interface)"), [_class0], class0),
    ('meta', RE(r"#"), [RE(r"$")], meta),
    ('function', RE(r"\b(?:function)"), [_function0], function),
]
