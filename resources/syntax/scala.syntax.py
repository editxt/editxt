# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: scala.js
name = 'Scala'
file_patterns = ['*.scala']

keyword = """
    type yield lazy override def with val var sealed abstract private
    trait object if forSome for while throw finally protected extends
    import final return else break new catch super class case package
    default try this match continue throws implicit
    """.split()

literal = ['true', 'false', 'null']

symbol = [RE(r"'\w[\w\d_]*(?!')")]

type = [RE(r"\b[A-Z][A-Za-z0-9_]*")]

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

meta = [RE(r"@[A-Za-z]+")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

subst = [RE(r"\$[A-Za-z0-9_]+")]

class string0:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        ('subst', subst),
        ('subst', RE(r"\${"), [RE(r"}")]),
    ]
string0.__name__ = 'string'

class string1:
    default_text_color = DELIMITER
    rules = [string0.rules[1], string0.rules[2]]
string1.__name__ = 'string'

keyword0 = ['def']

title = [
    RE(r"[^0-9\n\t \"'(?:),.`{}\[\]:;][^\n\t \"'(?:),.`{}\[\]:;]+|[^0-9\n\t \"'(?:),.`{}\[\]:;=]"),
]

class function:
    default_text_color = DELIMITER
    rules = [('keyword', keyword0), ('title', title)]

class _class:
    default_text_color = DELIMITER
    rules = [('_class', [RE(r"[:={\[\n;]")])]

keyword1 = ['class', 'object', 'trait', 'type']

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword1),
        ('_group0', RE(r"\b(?:extends|with)"), [RE(r"\B\b")]),
        ('params', RE(r"\("), [RE(r"\)")]),
        ('title', title),
    ]
class0.__name__ = 'class'

rules = [
    ('keyword', keyword),
    ('literal', literal),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")]),
    ('string', RE(r"[a-z]+\""), [RE(r"\"")], string0),
    ('string', RE(r"[a-z]+\"\"\""), [RE(r"\"\"\"")], string1),
    ('symbol', symbol),
    ('type', type),
    ('function', RE(r"\b(?:def)"), [RE(r"[:={\[(?:\n;]")], function),
    ('class', RE(r"\b(?:class|object|trait|type)"), [_class], class0),
    ('number', number),
    ('meta', meta),
]
