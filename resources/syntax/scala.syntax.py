# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: scala.js
name = 'Scala'
file_patterns = ['*.scala']

literal = ['true', 'false', 'null']

keyword = [
    'type',
    'yield',
    'lazy',
    'override',
    'def',
    'with',
    'val',
    'var',
    'sealed',
    'abstract',
    'private',
    'trait',
    'object',
    'if',
    'forSome',
    'for',
    'while',
    'throw',
    'finally',
    'protected',
    'extends',
    'import',
    'final',
    'return',
    'else',
    'break',
    'new',
    'catch',
    'super',
    'class',
    'case',
    'package',
    'default',
    'try',
    'this',
    'match',
    'continue',
    'throws',
    'implicit',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

subst = [RE(r"\$[A-Za-z0-9_]+")]

class string:
    default_text = DELIMITER
    word_groups = [('subst', subst)]
    delimited_ranges = [('subst', RE(r"\${"), [RE(r"}")])]

symbol = [RE(r"'\w[\w\d_]*(?!')")]

type = [RE(r"\b[A-Z][A-Za-z0-9_]*")]

keyword0 = ['def']

title = [
    RE(r"[^0-9\n\t \"'(),.`{}\[\]:;][^\n\t \"'(),.`{}\[\]:;]+|[^0-9\n\t \"'(),.`{}\[\]:;=]"),
]

class function:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0), ('title', title)]

keyword1 = ['class', 'object', 'trait', 'type']

class class0:
    default_text = DELIMITER
    word_groups = [('keyword', keyword1), ('title', title)]
    delimited_ranges = [
        ('_group4', RE(r"\b(extends|with)"), [RE(r"\B|\b")]),
        ('params', RE(r"\("), [RE(r"\)")]),
    ]
class0.__name__ = 'class'

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

meta = [RE(r"@[A-Za-z]+")]

word_groups = [
    ('literal', literal),
    ('keyword', keyword),
    ('symbol', symbol),
    ('type', type),
    ('number', number),
    ('meta', meta),
]

delimited_ranges = [
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('string', RE(r"\"\"\""), [RE(r"\"\"\"")]),
    ('string', RE(r"[a-z]+\""), [RE(r"\"")], string),
    ('string', RE(r"[a-z]+\"\"\""), [RE(r"\"\"\"")], string),
    ('function', RE(r"\b(def)"), [RE(r"[:={\[(\n;]")], function),
    ('class', RE(r"\b(class|object|trait|type)"), [RE(r"(?=[:={\[\n;])")], class0),
]
