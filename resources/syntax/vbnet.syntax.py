# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: vbnet.js
name = 'VB.NET'
file_patterns = ['*.vbnet', '*.vb']

flags = re.IGNORECASE | re.MULTILINE

built_in = [
    'boolean',
    'byte',
    'cbool',
    'cbyte',
    'cchar',
    'cdate',
    'cdec',
    'cdbl',
    'char',
    'cint',
    'clng',
    'cobj',
    'csbyte',
    'cshort',
    'csng',
    'cstr',
    'ctype',
    'date',
    'decimal',
    'directcast',
    'double',
    'gettype',
    'getxmlnamespace',
    'iif',
    'integer',
    'long',
    'object',
    'sbyte',
    'short',
    'single',
    'string',
    'trycast',
    'typeof',
    'uinteger',
    'ulong',
    'ushort',
]

keyword = [
    'addhandler',
    'addressof',
    'alias',
    'and',
    'andalso',
    'aggregate',
    'ansi',
    'as',
    'assembly',
    'auto',
    'binary',
    'by',
    'byref',
    'byval',
    'call',
    'case',
    'catch',
    'class',
    'compare',
    'const',
    'continue',
    'custom',
    'declare',
    'default',
    'delegate',
    'dim',
    'distinct',
    'do',
    'each',
    'equals',
    'else',
    'elseif',
    'end',
    'enum',
    'erase',
    'error',
    'event',
    'exit',
    'explicit',
    'finally',
    'for',
    'friend',
    'from',
    'function',
    'get',
    'global',
    'goto',
    'group',
    'handles',
    'if',
    'implements',
    'imports',
    'in',
    'inherits',
    'interface',
    'into',
    'is',
    'isfalse',
    'isnot',
    'istrue',
    'join',
    'key',
    'let',
    'lib',
    'like',
    'loop',
    'me',
    'mid',
    'mod',
    'module',
    'mustinherit',
    'mustoverride',
    'mybase',
    'myclass',
    'namespace',
    'narrowing',
    'new',
    'next',
    'not',
    'notinheritable',
    'notoverridable',
    'of',
    'off',
    'on',
    'operator',
    'option',
    'optional',
    'or',
    'order',
    'orelse',
    'overloads',
    'overridable',
    'overrides',
    'paramarray',
    'partial',
    'preserve',
    'private',
    'property',
    'protected',
    'public',
    'raiseevent',
    'readonly',
    'redim',
    'rem',
    'removehandler',
    'resume',
    'return',
    'select',
    'set',
    'shadows',
    'shared',
    'skip',
    'static',
    'step',
    'stop',
    'structure',
    'strict',
    'sub',
    'synclock',
    'take',
    'text',
    'then',
    'throw',
    'to',
    'try',
    'unicode',
    'until',
    'using',
    'when',
    'where',
    'while',
    'widening',
    'with',
    'withevents',
    'writeonly',
    'xor',
]

literal = ['true', 'false', 'nothing']

class doctag:
    default_text = DELIMITER
    rules = [
        # {'begin': {'type': 'RegExp', 'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b"}},
    ]

doctag0 = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        ('doctag', RE(r"'''|<!--|-->"), [RE(r"\B|\b")]),
        ('doctag', RE(r"</?"), [RE(r">")], doctag),
        # {'begin': {'type': 'RegExp', 'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b"}},
        ('doctag', doctag0),
    ]

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

meta_keyword = ['if', 'else', 'elseif', 'end', 'region', 'externalsource']

class meta:
    default_text = DELIMITER
    rules = [('meta-keyword', meta_keyword)]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('comment', RE(r"(?=')"), [RE(r"$")], comment),
    ('number', number),
    ('meta', RE(r"#"), [RE(r"$")], meta),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
