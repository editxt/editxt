# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: aspectj.js
name = 'AspectJ'
file_patterns = ['*.aspectj']

keyword = [
    'false',
    'synchronized',
    'int',
    'abstract',
    'float',
    'private',
    'char',
    'boolean',
    'static',
    'null',
    'if',
    'const',
    'for',
    'true',
    'while',
    'long',
    'throw',
    'strictfp',
    'finally',
    'protected',
    'import',
    'native',
    'final',
    'return',
    'void',
    'enum',
    'else',
    'extends',
    'implements',
    'break',
    'transient',
    'new',
    'catch',
    'instanceof',
    'byte',
    'super',
    'volatile',
    'case',
    'assert',
    'short',
    'package',
    'default',
    'double',
    'public',
    'try',
    'this',
    'switch',
    'continue',
    'throws',
    'privileged',
    'aspectOf',
    'adviceexecution',
    'proceed',
    'cflowbelow',
    'cflow',
    'initialization',
    'preinitialization',
    'staticinitialization',
    'withincode',
    'target',
    'within',
    'execution',
    'getWithinTypeName',
    'handler',
    'thisJoinPoint',
    'thisJoinPointStaticPart',
    'thisEnclosingJoinPointStaticPart',
    'declare',
    'parents',
    'warning',
    'error',
    'soft',
    'precedence',
    'thisAspectInstance',
]

doctag = [RE(r"@[A-Za-z]+")]

doctag0 = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag), ('doctag', doctag0)]

class comment0:
    default_text = DELIMITER
    word_groups = [('doctag', doctag0)]
comment0.__name__ = 'comment'

keyword0 = ['aspect']

title = [RE(r"[a-zA-Z_]\w*")]

keyword1 = [
    'false',
    'synchronized',
    'int',
    'abstract',
    'float',
    'private',
    'char',
    'boolean',
    'static',
    'null',
    'if',
    'const',
    'for',
    'true',
    'while',
    'long',
    'throw',
    'strictfp',
    'finally',
    'protected',
    'import',
    'native',
    'final',
    'return',
    'void',
    'enum',
    'else',
    'extends',
    'implements',
    'break',
    'transient',
    'new',
    'catch',
    'instanceof',
    'byte',
    'super',
    'volatile',
    'case',
    'assert',
    'short',
    'package',
    'default',
    'double',
    'public',
    'try',
    'this',
    'switch',
    'continue',
    'throws',
    'privileged',
    'aspectOf',
    'adviceexecution',
    'proceed',
    'cflowbelow',
    'cflow',
    'initialization',
    'preinitialization',
    'staticinitialization',
    'withincode',
    'target',
    'within',
    'execution',
    'getWithinTypeName',
    'handler',
    'thisJoinPoint',
    'thisJoinPointStaticPart',
    'thisEnclosingJoinPointStaticPart',
    'declare',
    'parents',
    'warning',
    'error',
    'soft',
    'precedence',
    'thisAspectInstance',
    'get',
    'set',
    'args',
    'call',
]

class _group7:
    default_text = DELIMITER
    word_groups = [('keyword', keyword1)]

class class0:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0), ('title', title)]
    delimited_ranges = [
        ('_group6', RE(r"\b(extends|implements|pertypewithin|perthis|pertarget|percflowbelow|percflow|issingleton)"), [RE(r"\B|\b")]),
        ('_group7', RE(r"\([^\)]*"), [RE(r"[)]+")], _group7),
    ]
class0.__name__ = 'class'

keyword2 = ['class', 'interface']

class class1:
    default_text = DELIMITER
    word_groups = [('keyword', keyword2), ('title', title)]
    delimited_ranges = [('_group8', RE(r"\b(extends|implements)"), [RE(r"\B|\b")])]
class1.__name__ = 'class'

keyword3 = ['pointcut', 'after', 'before', 'around', 'throwing', 'returning']

class _group10:
    default_text = DELIMITER
    word_groups = [('title', title)]

class _group9:
    default_text = DELIMITER
    word_groups = [('keyword', keyword3)]
    delimited_ranges = [
        ('_group10', RE(r"(?=[a-zA-Z_]\w*\s*\()"), [RE(r"\B|\b")], _group10),
    ]

class _group12:
    default_text = DELIMITER
    word_groups = [('keyword', keyword1)]

class _group11:
    default_text = DELIMITER
    word_groups = [('keyword', keyword)]
    delimited_ranges = [
        ('_group12', RE(r"[a-zA-Z_]\w*\s*\("), [RE(r"\B|\b")], _group12),
        ('string', RE(r"\""), [RE(r"\"")]),
    ]

class _group15:
    default_text = DELIMITER
    word_groups = [('title', title)]

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

class params:
    default_text = DELIMITER
    word_groups = [('keyword', keyword), ('number', number)]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ]

class function:
    default_text = DELIMITER
    word_groups = [('keyword', keyword)]
    delimited_ranges = [
        ('_group15', RE(r"(?=[a-zA-Z_]\w*\s*\()"), [RE(r"\B|\b")], _group15),
        ('params', RE(r"\("), [RE(r"\)")], params),
        ('comment', RE(r"//"), [RE(r"$")], comment0),
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ]

word_groups = [('keyword', keyword), ('number', number), ('meta', doctag)]

delimited_ranges = [
    ('comment', RE(r"/\*\*"), [RE(r"\*/")], comment),
    ('comment', RE(r"//"), [RE(r"$")], comment0),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('class', RE(r"\b(aspect)"), [RE(r"(?=[{;=])")], class0),
    ('class', RE(r"\b(class|interface)"), [RE(r"(?=[{;=])")], class1),
    ('_group9', RE(r"\b(pointcut|after|before|around|throwing|returning)"), [RE(r"[)]")], _group9),
    ('_group11', RE(r"(?=[:])"), [RE(r"[{;]")], _group11),
    ('_group14', RE(r"\b(new|throw)"), [RE(r"\B|\b")]),
    ('function', RE(r"(?=\w+ +\w+(\.)?\w+\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;])"), [RE(r"(?=[{;=])")], function),
]
