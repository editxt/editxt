# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: haskell.js
name = 'Haskell'
file_patterns = ['*.haskell', '*.hs']

keyword = """
    let in if then else case of where do module import hiding qualified
    type data newtype deriving class instance as default infix infixl
    infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe
    family forall mdo proc rec
    """.split()

meta = ('meta', RE(r"{-#"), [RE(r"#-}")])

meta0 = ('meta', RE(r"^#"), [RE(r"$")])

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

comment0 = ('comment', RE(r"--"), [RE(r"$")], comment)

comment1 = ('comment', RE(r"{-"), [RE(r"-}")], comment)

class _group1:
    default_text_color = DELIMITER
    rules = [
        meta,
        meta0,
        ('type', [RE(r"\b[A-Z][\w]*(?:\((?:\.\.|,|\w+)\))?")]),
        ('title', [RE(r"[_a-z][\w']*")]),
        comment0,
        comment1,
    ]

_group10 = ('_group1', RE(r"\("), [RE(r"\)")], _group1)

class _group0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['module', 'where']),
        ('keyword', ['module']),
        _group10,
        comment0,
        comment1,
    ]

class _group3:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['import', 'qualified', 'as', 'hiding']),
        _group10,
        comment0,
        comment1,
    ]

type0 = ('type', [RE(r"\b[A-Z][\w']*")])

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['class', 'family', 'instance', 'where']),
        type0,
        _group10,
        comment0,
        comment1,
    ]
class0.__name__ = 'class'

class _group4:
    default_text_color = DELIMITER
    rules = []

class class2:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['data', 'family', 'type', 'newtype', 'deriving']),
        meta,
        type0,
        _group10,
        ('_group4', RE(r"{"), [RE(r"}")], _group4),
        comment0,
        comment1,
    ]
class2.__name__ = 'class'

class _group5:
    default_text_color = DELIMITER
    rules = [('keyword', ['default']), type0, _group10, comment0, comment1]

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

number0 = ('number', number)

class _group6:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['infix', 'infixl', 'infixr']),
        number0,
        comment0,
        comment1,
    ]

keyword8 = """
    foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe
    """.split()

class string:
    default_text_color = DELIMITER
    rules = [('operator.escape', [RE(r"\\[\s\S]")])]

string0 = ('string', RE(r"\""), [RE(r"\"")], string)

class _group7:
    default_text_color = DELIMITER
    rules = [('keyword', keyword8), type0, string0, comment0, comment1]

rules = [
    ('keyword', keyword),
    ('_group0', RE(r"\b(?:module)"), [RE(r"where")], _group0),
    ('_group3', RE(r"\bimport\b"), [RE(r"$")], _group3),
    ('class', RE(r"^(?:\s*)?(?:class|instance)\b"), [RE(r"where")], class0),
    ('class', RE(r"\b(?:data|(?:new)?type)\b"), [RE(r"$")], class2),
    ('_group5', RE(r"\b(?:default)"), [RE(r"$")], _group5),
    ('_group6', RE(r"\b(?:infix|infixl|infixr)"), [RE(r"$")], _group6),
    ('_group7', RE(r"\bforeign\b"), [RE(r"$")], _group7),
    ('meta', RE(r"#!\/usr\/bin\/env runhaskell"), [RE(r"$")]),
    meta,
    meta0,
    string0,
    number0,
    type0,
    ('title', [RE(r"^[_a-z][\w']*")]),
    comment0,
    comment1,
    # ignore {'begin': '->|<-'},
]

_group4.rules.extend(_group1.rules)
