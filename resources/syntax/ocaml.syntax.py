# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: ocaml.js
name = 'OCaml'
file_patterns = ['*.ocaml', '*.ml']

literal = ['true', 'false']

keyword = [
    'and',
    'as',
    'assert',
    'asr',
    'begin',
    'class',
    'constraint',
    'do',
    'done',
    'downto',
    'else',
    'end',
    'exception',
    'external',
    'for',
    'fun',
    'function',
    'functor',
    'if',
    'in',
    'include',
    'inherit!',
    'inherit',
    'initializer',
    'land',
    'lazy',
    'let',
    'lor',
    'lsl',
    'lsr',
    'lxor',
    'match',
    'method!',
    'method',
    'mod',
    'module',
    'mutable',
    'new',
    'object',
    'of',
    'open!',
    'open',
    'or',
    'private',
    'rec',
    'sig',
    'struct',
    'then',
    'to',
    'try',
    'type',
    'val!',
    'val',
    'virtual',
    'when',
    'while',
    'with',
    'parser',
    'value',
]

built_in = [
    'array',
    'bool',
    'bytes',
    'char',
    'exn',
    'float',
    'int',
    'int32',
    'int64',
    'list',
    'lazy_t',
    'nativeint',
    'string',
    'unit',
    'in_channel',
    'out_channel',
    'ref',
]

literal0 = [RE(r"\[(\|\|)?\]|\(\)")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

symbol = [RE(r"'[A-Za-z_](?!')[\w']*")]

type = [RE(r"`[A-Z][\w']*")]

type0 = [RE(r"\b[A-Z][\w']*")]

number = [
    RE(r"\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)"),
]

word_groups = [
    ('literal', literal),
    ('keyword', keyword),
    ('built_in', built_in),
    ('literal', literal0),
    ('symbol', symbol),
    ('type', type),
    ('type', type0),
    ('number', number),
]

delimited_ranges = [
    ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")]),
]
