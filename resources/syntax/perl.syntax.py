# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: perl.js
name = 'Perl'
file_patterns = ['*.perl', '*.pl']

keyword = [
    'getpwent',
    'getservent',
    'quotemeta',
    'msgrcv',
    'scalar',
    'kill',
    'dbmclose',
    'undef',
    'lc',
    'ma',
    'syswrite',
    'tr',
    'send',
    'umask',
    'sysopen',
    'shmwrite',
    'vec',
    'qx',
    'utime',
    'local',
    'oct',
    'semctl',
    'localtime',
    'readpipe',
    'do',
    'return',
    'format',
    'read',
    'sprintf',
    'dbmopen',
    'pop',
    'getpgrp',
    'not',
    'getpwnam',
    'rewinddir',
    'qqfileno',
    'qw',
    'endprotoent',
    'wait',
    'sethostent',
    'bless',
    's',
    'opendir',
    'continue',
    'each',
    'sleep',
    'endgrent',
    'shutdown',
    'dump',
    'chomp',
    'connect',
    'getsockname',
    'die',
    'socketpair',
    'close',
    'flock',
    'exists',
    'index',
    'shmgetsub',
    'for',
    'endpwent',
    'redo',
    'lstat',
    'msgctl',
    'setpgrp',
    'abs',
    'exit',
    'select',
    'print',
    'ref',
    'gethostbyaddr',
    'unshift',
    'fcntl',
    'syscall',
    'goto',
    'getnetbyaddr',
    'join',
    'gmtime',
    'symlink',
    'semget',
    'splice',
    'x',
    'getpeername',
    'recv',
    'log',
    'setsockopt',
    'cos',
    'last',
    'reverse',
    'gethostbyname',
    'getgrnam',
    'study',
    'formline',
    'endhostent',
    'times',
    'chop',
    'length',
    'gethostent',
    'getnetent',
    'pack',
    'getprotoent',
    'getservbyname',
    'rand',
    'mkdir',
    'pos',
    'chmod',
    'y',
    'substr',
    'endnetent',
    'printf',
    'next',
    'open',
    'msgsnd',
    'readdir',
    'use',
    'unlink',
    'getsockopt',
    'getpriority',
    'rindex',
    'wantarray',
    'hex',
    'system',
    'getservbyport',
    'endservent',
    'int',
    'chr',
    'untie',
    'rmdir',
    'prototype',
    'tell',
    'listen',
    'fork',
    'shmread',
    'ucfirst',
    'setprotoent',
    'else',
    'sysseek',
    'link',
    'getgrgid',
    'shmctl',
    'waitpid',
    'unpack',
    'getnetbyname',
    'reset',
    'chdir',
    'grep',
    'split',
    'require',
    'caller',
    'lcfirst',
    'until',
    'warn',
    'while',
    'values',
    'shift',
    'telldir',
    'getpwuid',
    'my',
    'getprotobynumber',
    'delete',
    'and',
    'sort',
    'uc',
    'defined',
    'srand',
    'accept',
    'package',
    'seekdir',
    'getprotobyname',
    'semop',
    'our',
    'rename',
    'seek',
    'if',
    'q',
    'chroot',
    'sysread',
    'setpwent',
    'no',
    'crypt',
    'getc',
    'chown',
    'sqrt',
    'write',
    'setnetent',
    'setpriority',
    'foreach',
    'tie',
    'sin',
    'msgget',
    'map',
    'stat',
    'getlogin',
    'unless',
    'elsif',
    'truncate',
    'exec',
    'keys',
    'glob',
    'tied',
    'closedirioctl',
    'socket',
    'readlink',
    'eval',
    'xor',
    'readline',
    'binmode',
    'setservent',
    'eof',
    'ord',
    'bind',
    'alarm',
    'pipe',
    'atan2',
    'getgrent',
    'exp',
    'time',
    'push',
    'setgrent',
    'gt',
    'lt',
    'or',
    'ne',
    'm',
    'break',
    'given',
    'say',
    'state',
    'when',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

class _group3:
    default_text = DELIMITER
    rules = []

class subst:
    default_text = DELIMITER
    rules = [('keyword', keyword)]

class string:
    default_text = DELIMITER
    rules = [
        ('subst', RE(r"[$@]\{"), [RE(r"\}")], subst),
        # {},
    ]

class string0:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]
string0.__name__ = 'string'

number = [
    RE(r"(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b"),
]

keyword0 = ['split', 'return', 'print', 'reverse', 'grep']

regexp = [RE(r"(s|tr|y)/(\\.|[^/])*/(\\.|[^/])*/[a-z]*")]

class regexp0:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]
regexp0.__name__ = 'regexp'

class _group11:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        None,  # rules[1],
        ('regexp', regexp),
        ('regexp', RE(r"(m|qr)?/"), [RE(r"/[a-z]*")], regexp0),
    ]

keyword1 = ['sub']

title = [RE(r"[a-zA-Z]\w*")]

class function:
    default_text = DELIMITER
    rules = [('keyword', keyword1), ('title', title)]

class _group13:
    default_text = DELIMITER
    rules = [('comment', RE(r"^@@.*"), [RE(r"$")])]

rules = [
    ('keyword', keyword),
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('comment', RE(r"^\=\w"), [RE(r"\=cut")], comment0),
    ('_group3', RE(r"->{"), [RE(r"}")], _group3),
    ('string', RE(r"q[qwxr]?\s*\("), [RE(r"\)")], string),
    ('string', RE(r"q[qwxr]?\s*\["), [RE(r"\]")], string),
    ('string', RE(r"q[qwxr]?\s*\{"), [RE(r"\}")], string),
    ('string', RE(r"q[qwxr]?\s*\|"), [RE(r"\|")], string),
    ('string', RE(r"q[qwxr]?\s*\<"), [RE(r"\>")], string),
    ('string', RE(r"qw\s+q"), [RE(r"q")], string),
    ('string', RE(r"'"), [RE(r"'")], string0),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('string', RE(r"`"), [RE(r"`")], string0),
    ('string', RE(r"{\w+}"), [RE(r"\B|\b")]),
    ('string', RE(r"-?\w+\s*\=\>"), [RE(r"\B|\b")]),
    ('number', number),
    ('_group11', RE(r"(\/\/|!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~|\b(split|return|print|reverse|grep)\b)\s*"), [RE(r"\B|\b")], _group11),
    ('function', RE(r"\b(sub)"), [RE(r"(?=(\s*\(.*?\))?[;{])")], function),
    ('_group13', RE(r"^__DATA__$"), [RE(r"^__END__$")], 'mojolicious'),
]

_group11.rules[1] = rules[1]
_group3.rules.extend(rules)
subst.rules.extend(rules)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
