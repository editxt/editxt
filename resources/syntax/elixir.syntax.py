# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: elixir.js
name = 'Elixir'
file_patterns = ['*.elixir']

keyword = [
    'and',
    'false',
    'then',
    'defined',
    'module',
    'in',
    'return',
    'redo',
    'retry',
    'end',
    'for',
    'true',
    'self',
    'when',
    'next',
    'until',
    'do',
    'begin',
    'unless',
    'nil',
    'break',
    'not',
    'case',
    'cond',
    'alias',
    'while',
    'ensure',
    'or',
    'include',
    'use',
    'alias',
    'fn',
    'quote',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

keyword0 = ['defmodule', 'defrecord']

title = [RE(r"[a-zA-Z_][a-zA-Z0-9_]*(\!|\?)?")]

class class0:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0), ('title', title)]
class0.__name__ = 'class'

keyword1 = ['def', 'defp', 'defmacro']

class function:
    default_text = DELIMITER
    word_groups = [('keyword', keyword1), ('title', title)]

class symbol:
    default_text = DELIMITER
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
    ]

symbol0 = [RE(r"[a-zA-Z_][a-zA-Z0-9_]*(\!|\?)?:")]

number = [
    RE(r"(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b"),
]

variable = [RE(r"(\$\W)|((\$|\@\@?)(\w+))")]

class subst:
    default_text = DELIMITER
    word_groups = [('keyword', keyword)]

class regexp:
    default_text = DELIMITER
    delimited_ranges = [('subst', RE(r"#\{"), [RE(r"}")], subst)]

class _group4:
    default_text = DELIMITER
    delimited_ranges = [
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('regexp', RE(r"/"), [RE(r"/[a-z]*")], regexp),
        ('regexp', RE(r"%r\["), [RE(r"\][a-z]*")], regexp),
    ]

class subst0:
    default_text = DELIMITER
    word_groups = [
        ('keyword', keyword),
        ('symbol', symbol0),
        ('number', number),
        ('variable', variable),
    ]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('class', RE(r"\b(defmodule|defrecord)"), [RE(r"\bdo\b|$|;")], class0),
        ('function', RE(r"\b(def|defp|defmacro)"), [RE(r"\B\b")], function),
        ('symbol', RE(r":"), [RE(r"\B|\b")], symbol),
        ('_group4', RE(r"(!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~)\s*"), [RE(r"\B|\b")], _group4),
    ]
subst0.__name__ = 'subst'

class string:
    default_text = DELIMITER
    delimited_ranges = [('subst', RE(r"#\{"), [RE(r"}")], subst0)]

class _group12:
    default_text = DELIMITER
    delimited_ranges = [
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('regexp', RE(r"/"), [RE(r"/[a-z]*")], regexp),
        ('regexp', RE(r"%r\["), [RE(r"\][a-z]*")], regexp),
    ]

class subst1:
    default_text = DELIMITER
    word_groups = [
        ('keyword', keyword),
        ('symbol', symbol0),
        ('number', number),
        ('variable', variable),
    ]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('class', RE(r"\b(defmodule|defrecord)"), [RE(r"\bdo\b|$|;")], class0),
        ('function', RE(r"\b(def|defp|defmacro)"), [RE(r"\B\b")], function),
        ('symbol', RE(r":"), [RE(r"\B|\b")], symbol),
        ('_group12', RE(r"(!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~)\s*"), [RE(r"\B|\b")], _group12),
    ]
subst1.__name__ = 'subst'

class string0:
    default_text = DELIMITER
    delimited_ranges = [('subst', RE(r"#\{"), [RE(r"}")], subst1)]
string0.__name__ = 'string'

symbol1 = [RE(r":")]

class _group20:
    default_text = DELIMITER
    delimited_ranges = [
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('regexp', RE(r"/"), [RE(r"/[a-z]*")], regexp),
        ('regexp', RE(r"%r\["), [RE(r"\][a-z]*")], regexp),
    ]

class subst2:
    default_text = DELIMITER
    word_groups = [
        ('keyword', keyword),
        ('symbol', symbol1),
        ('symbol', symbol0),
        ('number', number),
        ('variable', variable),
    ]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('class', RE(r"\b(defmodule|defrecord)"), [RE(r"\bdo\b|$|;")], class0),
        ('function', RE(r"\b(def|defp|defmacro)"), [RE(r"\B\b")], function),
        ('_group20', RE(r"(!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~)\s*"), [RE(r"\B|\b")], _group20),
    ]
subst2.__name__ = 'subst'

class string1:
    default_text = DELIMITER
    delimited_ranges = [('subst', RE(r"#\{"), [RE(r"}")], subst2)]
string1.__name__ = 'string'

class _group27:
    default_text = DELIMITER
    delimited_ranges = [
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('regexp', RE(r"/"), [RE(r"/[a-z]*")], regexp),
        ('regexp', RE(r"%r\["), [RE(r"\][a-z]*")], regexp),
    ]

class subst3:
    default_text = DELIMITER
    word_groups = [
        ('keyword', keyword),
        ('symbol', symbol1),
        ('symbol', symbol0),
        ('number', number),
        ('variable', variable),
    ]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('string', RE(r"\""), [RE(r"\"")]),
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('class', RE(r"\b(defmodule|defrecord)"), [RE(r"\bdo\b|$|;")], class0),
        ('function', RE(r"\b(def|defp|defmacro)"), [RE(r"\B\b")], function),
        ('_group27', RE(r"(!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~)\s*"), [RE(r"\B|\b")], _group27),
    ]
subst3.__name__ = 'subst'

class string2:
    default_text = DELIMITER
    delimited_ranges = [('subst', RE(r"#\{"), [RE(r"}")], subst3)]
string2.__name__ = 'string'

class symbol2:
    default_text = DELIMITER
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")], string1),
        ('string', RE(r"\""), [RE(r"\"")], string2),
    ]
symbol2.__name__ = 'symbol'

class string3:
    default_text = DELIMITER
    delimited_ranges = [('subst', RE(r"#\{"), [RE(r"}")], subst)]
string3.__name__ = 'string'

class symbol3:
    default_text = DELIMITER
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")], string3),
        ('string', RE(r"\""), [RE(r"\"")], string3),
    ]
symbol3.__name__ = 'symbol'

class subst4:
    default_text = DELIMITER
    word_groups = [
        ('keyword', keyword),
        ('symbol', symbol0),
        ('number', number),
        ('variable', variable),
    ]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")], string3),
        ('string', RE(r"\""), [RE(r"\"")], string3),
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('class', RE(r"\b(defmodule|defrecord)"), [RE(r"\bdo\b|$|;")], class0),
        ('function', RE(r"\b(def|defp|defmacro)"), [RE(r"\B\b")], function),
        ('symbol', RE(r":"), [RE(r"\B|\b")], symbol3),
    ]
subst4.__name__ = 'subst'

class regexp0:
    default_text = DELIMITER
    delimited_ranges = [('subst', RE(r"#\{"), [RE(r"}")], subst4)]
regexp0.__name__ = 'regexp'

class _group33:
    default_text = DELIMITER
    delimited_ranges = [
        ('comment', RE(r"#"), [RE(r"$")], comment),
        ('regexp', RE(r"/"), [RE(r"/[a-z]*")], regexp0),
        ('regexp', RE(r"%r\["), [RE(r"\][a-z]*")], regexp0),
    ]

word_groups = [
    ('keyword', keyword),
    ('symbol', symbol0),
    ('number', number),
    ('variable', variable),
]

delimited_ranges = [
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\""), [RE(r"\"")], string0),
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('class', RE(r"\b(defmodule|defrecord)"), [RE(r"\bdo\b|$|;")], class0),
    ('function', RE(r"\b(def|defp|defmacro)"), [RE(r"\B\b")], function),
    ('symbol', RE(r":"), [RE(r"\B|\b")], symbol2),
    ('_group33', RE(r"(!|!=|!==|%|%=|&|&&|&=|\*|\*=|\+|\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\?|\[|\{|\(|\^|\^=|\||\|=|\|\||~)\s*"), [RE(r"\B|\b")], _group33),
]
