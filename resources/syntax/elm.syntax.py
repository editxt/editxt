# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: elm.js
name = 'Elm'
file_patterns = ['*.elm']

keyword = [
    'let',
    'in',
    'if',
    'then',
    'else',
    'case',
    'of',
    'where',
    'module',
    'import',
    'exposing',
    'type',
    'alias',
    'as',
    'infix',
    'infixl',
    'infixr',
    'port',
]

keyword0 = ['module', 'where']

type = [RE(r"\b[A-Z][\w]*(\((\.\.|,|\w+)\))?")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'type': 'RegExp', 'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b"}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

class _group1:
    default_text = DELIMITER
    rules = [
        ('type', type),
        ('comment', RE(r"--"), [RE(r"$")], comment),
        ('comment', RE(r"{-"), [RE(r"-}")], comment0),
    ]

class _group0:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        ('_group1', RE(r"\("), [RE(r"\)")], _group1),
        # {},
    ]

keyword1 = ['import', 'as', 'exposing']

class _group2:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword1),
        None,  # _group0.rules[1],
        # {},
    ]

keyword2 = ['type', 'alias']

type0 = [RE(r"\b[A-Z][\w']*")]

class _group4:
    default_text = DELIMITER
    rules = []

class _group3:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword2),
        ('type', type0),
        None,  # _group0.rules[1],
        ('_group4', RE(r"{"), [RE(r"}")], _group4),
        # {},
    ]

keyword3 = ['infix', 'infixl', 'infixr']

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

class _group5:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword3),
        ('number', number),
        # {},
    ]

keyword4 = ['port']

class _group6:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword4),
        # {},
    ]

title = [RE(r"^[_a-z][\w']*")]

rules = [
    ('keyword', keyword),
    ('_group0', RE(r"\b(module)"), [RE(r"where")], _group0),
    ('_group2', RE(r"import"), [RE(r"$")], _group2),
    ('_group3', RE(r"type"), [RE(r"$")], _group3),
    ('_group5', RE(r"\b(infix|infixl|infixr)"), [RE(r"$")], _group5),
    ('_group6', RE(r"port"), [RE(r"$")], _group6),
    ('string', RE(r"\""), [RE(r"\"")]),
    None,  # ('number', number),
    None,  # ('type', type0),
    ('title', title),
    # {},
]

_group2.rules[1] = _group0.rules[1]
_group3.rules[2] = _group0.rules[1]
rules[7] = ('number', number)
rules[8] = ('type', type0)
_group4.rules.extend(_group1.rules)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
