# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: objectivec.js
name = 'Objective C'
file_patterns = ['*.objectivec', '*.mm', '*.objc', '*.obj-c']

built_in = [
    'BOOL',
    'dispatch_once_t',
    'dispatch_queue_t',
    'dispatch_sync',
    'dispatch_async',
    'dispatch_once',
]

keyword = [
    'int',
    'float',
    'while',
    'char',
    'export',
    'sizeof',
    'typedef',
    'const',
    'struct',
    'for',
    'union',
    'unsigned',
    'long',
    'volatile',
    'static',
    'bool',
    'mutable',
    'if',
    'do',
    'return',
    'goto',
    'void',
    'enum',
    'else',
    'break',
    'extern',
    'asm',
    'case',
    'short',
    'default',
    'double',
    'register',
    'explicit',
    'signed',
    'typename',
    'this',
    'switch',
    'continue',
    'wchar_t',
    'inline',
    'readonly',
    'assign',
    'readwrite',
    'self',
    '@synchronized',
    'id',
    'typeof',
    'nonatomic',
    'super',
    'unichar',
    'IBOutlet',
    'IBAction',
    'strong',
    'weak',
    'copy',
    'in',
    'out',
    'inout',
    'bycopy',
    'byref',
    'oneway',
    '__strong',
    '__weak',
    '__block',
    '__autoreleasing',
    '@private',
    '@protected',
    '@public',
    '@try',
    '@property',
    '@end',
    '@throw',
    '@catch',
    '@finally',
    '@autoreleasepool',
    '@synthesize',
    '@dynamic',
    '@selector',
    '@optional',
    '@required',
]

literal = ['false', 'true', 'FALSE', 'TRUE', 'nil', 'YES', 'NO', 'NULL']

built_in0 = [RE(r"(AV|CA|CF|CG|CI|MK|MP|NS|UI)\w+")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'type': 'RegExp', 'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b"}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

number = [RE(r"(\b0[xX][a-fA-F0-9]+|(\b\d+(\.\d*)?|\.\d+)([eE][-+]?\d+)?)")]

class string:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
    ]

class meta:
    default_text = DELIMITER
    rules = [
        ('meta-string', RE(r"\""), [RE(r"\"")]),
        ('meta-string', RE(r"<"), [RE(r">")]),
    ]

keyword0 = ['@interface', '@class', '@protocol', '@implementation']

title = [RE(r"[a-zA-Z_]\w*")]

class class0:
    default_text = DELIMITER
    rules = [('keyword', keyword0), ('title', title)]
class0.__name__ = 'class'

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('built_in', built_in0),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('number', number),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('string', RE(r"@\""), [RE(r"\"")], string),
    ('string', RE(r"'"), [RE(r"[^\\]'")]),
    ('meta', RE(r"#"), [RE(r"$")], meta),
    ('class', RE(r"(@interface|@class|@protocol|@implementation)\b"), [RE(r"(?=({|$))")], class0),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
