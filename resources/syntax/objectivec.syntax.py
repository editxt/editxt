# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: objectivec.js
name = 'Objective C'
file_patterns = ['*.objectivec', '*.mm', '*.objc', '*.obj-c']

built_in = """
    BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async
    dispatch_once
    """.split()

keyword = """
    int float while char export sizeof typedef const struct for union
    unsigned long volatile static bool mutable if do return goto void
    enum else break extern asm case short default double register
    explicit signed typename this switch continue wchar_t inline
    readonly assign readwrite self @synchronized id typeof nonatomic
    super unichar IBOutlet IBAction strong weak copy in out inout bycopy
    byref oneway __strong __weak __block __autoreleasing @private
    @protected @public @try @property @end @throw @catch @finally
    @autoreleasepool @synthesize @dynamic @selector @optional @required
    """.split()

literal = ['false', 'true', 'FALSE', 'TRUE', 'nil', 'YES', 'NO', 'NULL']

built_in0 = [RE(r"(?:AV|CA|CF|CG|CI|MK|MP|NS|UI)\w+")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

number = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

class meta:
    default_text_color = DELIMITER
    rules = [
        ('meta-string', RE(r"\""), [RE(r"\"")]),
        ('meta-string', RE(r"<"), [RE(r">")]),
    ]

class _class:
    default_text_color = DELIMITER
    rules = [('_class', [RE(r"(?:{|$)")])]

keyword0 = ['@interface', '@class', '@protocol', '@implementation']

title = [RE(r"[a-zA-Z_]\w*")]

class class0:
    default_text_color = DELIMITER
    rules = [('keyword', keyword0), ('title', title)]
class0.__name__ = 'class'

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('built_in', built_in0),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('number', number),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('string', RE(r"@\""), [RE(r"\"")], string),
    ('string', RE(r"'"), [RE(r"[^\\]'")]),
    ('meta', RE(r"#"), [RE(r"$")], meta),
    ('class', RE(r"(?:@interface|@class|@protocol|@implementation)\b"), [_class], class0),
    # ignore {'begin': '\\.[a-zA-Z_]\\w*', 'relevance': 0},
]
