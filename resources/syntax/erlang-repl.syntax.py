# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: erlang-repl.js
name = 'Erlang REPL'
file_patterns = ['*.erlang-repl']

built_in = ['spawn', 'spawn_link', 'self']

keyword = """
    after and andalso band begin bnot bor bsl bsr bxor case catch cond
    div end fun if let not of or orelse query receive rem try when xor
    """.split()

meta = [RE(r"^[0-9]+> ")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

number = [RE(r"\b(?:\d+#[a-fA-F0-9]+|\d+(?:\.\d+)?(?:[eE][-+]?\d+)?)")]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('meta', meta),
    ('comment', RE(r"%"), [RE(r"$")], comment),
    ('number', number),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', RE(r"\""), [RE(r"\"")], string),
    # ignore {'begin': '\\?(::)?([A-Z]\\w*(::)?)+'},
    # ignore {'begin': '->'},
    # ignore {'begin': 'ok'},
    # ignore {'begin': '!'},
    # ignore {'begin': "(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)", 'relevance': 0},
    # ignore {'begin': "[A-Z][a-zA-Z0-9_']*", 'relevance': 0},
]
