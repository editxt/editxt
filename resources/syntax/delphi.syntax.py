# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: delphi.js
name = 'Delphi'
file_patterns = ['*.delphi']

flags = re.IGNORECASE | re.MULTILINE

keyword = """
    exports register file shl array record property for mod while set
    ally label uses raise not stored class safecall var interface or
    private static exit index inherited to else stdcall override shr asm
    far resourcestring finalization packed virtual out and protected
    library do xorwrite goto near function end div overload object unit
    begin string on inline repeat until destructor write message program
    with read initialization except default nil if case cdecl in downto
    threadvar of try pascal const external constructor type public then
    implementation finally published procedure
    """.split()

class string:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "''", 'type': 'RegExp'}},
    ]

string0 = [RE(r"(?:#\d+)+")]

number = [RE(r"\b\d+(?:\.\d+)?")]

title = [RE(r"[a-zA-Z]\w*")]

class _group0:
    default_text = DELIMITER
    rules = [('title', title)]

keyword0 = ['function', 'constructor', 'destructor', 'procedure']

class params:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword),
        None,  # rules[1],
        ('string', string0),
    ]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class function:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        ('title', title),
        ('params', RE(r"\("), [RE(r"\)")], params),
        ('comment', RE(r"//"), [RE(r"$")], comment),
        ('comment', RE(r"\{"), [RE(r"\}")], comment),
        ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment),
    ]

rules = [
    ('keyword', keyword),
    ('string', RE(r"'"), [RE(r"'")], string),
    ('string', string0),
    ('number', number),
    ('_group0', RE(r"(?=[a-zA-Z]\w*\s*=\s*class\s*\()"), [RE(r"\B\b")], _group0),
    ('function', RE(r"\b(?:function|constructor|destructor|procedure)"), [RE(r"[:;]")], function),
    function.rules[3],
    function.rules[4],
    function.rules[5],
]

params.rules[1] = rules[1]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
