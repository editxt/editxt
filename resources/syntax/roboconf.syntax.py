# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: roboconf.js
name = 'Roboconf'
file_patterns = ['*.roboconf', '*.graph', '*.instances']

flags = re.IGNORECASE | re.MULTILINE

keyword = ['import']

keyword0 = ['facet']

class _attribute:
    default_text = DELIMITER
    rules = [('_attribute', RE(r"\s*:"), [RE(r'\b|\B')])]

class attribute:
    default_text = DELIMITER
    rules = [('attribute', RE(r"[a-zA-Z-_]+"), [_attribute])]

variable = [RE(r"\.[a-zA-Z-_]+")]

keyword1 = [RE(r"\(optional\)")]

class _group1:
    default_text = DELIMITER
    rules = [('variable', variable), ('keyword', keyword1)]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class _group0:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        ('attribute', attribute, [RE(r";")], _group1),
        ('comment', RE(r"#"), [RE(r"$")], comment),
    ]

keyword2 = """
    name count channels instance-data instance-state instance of
    """.split()

class _group2:
    default_text = DELIMITER
    rules = [('keyword', keyword2), _group0.rules[1], _group0.rules[2]]

class _group3:
    default_text = DELIMITER
    rules = [_group0.rules[1], _group0.rules[2]]

rules = [
    ('keyword', keyword),
    ('_group0', RE(r"^facet [a-zA-Z-_][^\n{]+\{"), [RE(r"}")], _group0),
    ('_group2', RE(r"^\s*instance of [a-zA-Z-_][^\n{]+\{"), [RE(r"}")], _group2),
    ('_group3', RE(r"^[a-zA-Z-_][^\n{]+\{"), [RE(r"}")], _group3),
    _group0.rules[2],
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
