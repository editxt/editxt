# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: gradle.js
name = 'Gradle'
file_patterns = ['*.gradle']

flags = re.IGNORECASE | re.MULTILINE

keyword = [
    'task',
    'project',
    'allprojects',
    'subprojects',
    'artifacts',
    'buildscript',
    'configurations',
    'dependencies',
    'repositories',
    'sourceSets',
    'description',
    'delete',
    'from',
    'into',
    'include',
    'exclude',
    'source',
    'classpath',
    'destinationDir',
    'includes',
    'options',
    'sourceCompatibility',
    'targetCompatibility',
    'group',
    'flatDir',
    'doLast',
    'doFirst',
    'flatten',
    'todir',
    'fromdir',
    'ant',
    'def',
    'abstract',
    'break',
    'case',
    'catch',
    'continue',
    'default',
    'do',
    'else',
    'extends',
    'final',
    'finally',
    'for',
    'if',
    'implements',
    'instanceof',
    'native',
    'new',
    'private',
    'protected',
    'public',
    'return',
    'static',
    'switch',
    'synchronized',
    'throw',
    'throws',
    'transient',
    'try',
    'volatile',
    'while',
    'strictfp',
    'package',
    'import',
    'false',
    'null',
    'super',
    'this',
    'true',
    'antlrtask',
    'checkstyle',
    'codenarc',
    'copy',
    'boolean',
    'byte',
    'char',
    'class',
    'double',
    'float',
    'int',
    'interface',
    'long',
    'short',
    'void',
    'compile',
    'runTime',
    'file',
    'fileTree',
    'abs',
    'any',
    'append',
    'asList',
    'asWritable',
    'call',
    'collect',
    'compareTo',
    'count',
    'div',
    'dump',
    'each',
    'eachByte',
    'eachFile',
    'eachLine',
    'every',
    'find',
    'findAll',
    'flatten',
    'getAt',
    'getErr',
    'getIn',
    'getOut',
    'getText',
    'grep',
    'immutable',
    'inject',
    'inspect',
    'intersect',
    'invokeMethods',
    'isCase',
    'join',
    'leftShift',
    'minus',
    'multiply',
    'newInputStream',
    'newOutputStream',
    'newPrintWriter',
    'newReader',
    'newWriter',
    'next',
    'plus',
    'pop',
    'power',
    'previous',
    'print',
    'println',
    'push',
    'putAt',
    'read',
    'readBytes',
    'readLines',
    'reverse',
    'reverseEach',
    'round',
    'size',
    'sort',
    'splitEachLine',
    'step',
    'subMap',
    'times',
    'toInteger',
    'toList',
    'tokenize',
    'upto',
    'waitForOrKill',
    'withPrintWriter',
    'withReader',
    'withStream',
    'withWriter',
    'withWriterAppend',
    'write',
    'writeLine',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

class string:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

number = [RE(r"\b\d+(\.\d+)?")]

class _group1:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

class regexp:
    default_text = DELIMITER
    rules = [
        # {'begin': '\\\\[\\s\\S]', 'relevance': 0},
        ('_group1', RE(r"\["), [RE(r"\]")], _group1),
    ]

rules = [
    ('keyword', keyword),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('number', number),
    ('regexp', RE(r"\/"), [RE(r"\/[gimuy]*")], regexp),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
