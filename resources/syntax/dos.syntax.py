# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: dos.js
name = 'DOS .bat'
file_patterns = ['*.dos', '*.bat', '*.cmd']

flags = re.IGNORECASE | re.MULTILINE

built_in = """
    prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux shift cd dir echo
    setlocal endlocal set pause copy append assoc at attrib break cacls
    cd chcp chdir chkdsk chkntfs cls cmd color comp compact convert date
    dir diskcomp diskcopy doskey erase fs find findstr format ftype
    graftabl help keyb label md mkdir mode more move path pause print
    popd pushd promt rd recover rem rename replace restore rmdir
    shiftsort start subst time title tree type ver verify vol ping net
    ipconfig taskkill xcopy ren del
    """.split()

keyword = """
    if else goto for in do call exit not exist errorlevel defined equ
    neq lss leq gtr geq
    """.split()

variable = [RE(r"%%[^ ]|%[^ ]+?%|![^ ]+?!")]

title = [RE(r"(?:[_a-zA-Z]\w*\.)*(?:[_a-zA-Z]\w*:)?[_a-zA-Z]\w*")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

class function:
    default_text = DELIMITER
    rules = [
        ('title', title),
        ('comment', RE(r"@?rem\b"), [RE(r"$")], comment),
    ]

number = [RE(r"\b\d+")]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('variable', variable),
    ('function', RE(r"^\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(?::|\s+label)"), [RE(r"goto:eof")], function),
    ('number', number),
    function.rules[1],
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
