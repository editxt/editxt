# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: xl.js
name = 'XL'
file_patterns = ['*.xl', '*.tao']

built_in = [
    'in',
    'mod',
    'rem',
    'and',
    'or',
    'xor',
    'not',
    'abs',
    'sign',
    'floor',
    'ceil',
    'sqrt',
    'sin',
    'cos',
    'tan',
    'asin',
    'acos',
    'atan',
    'exp',
    'expm1',
    'log',
    'log2',
    'log10',
    'log1p',
    'pi',
    'at',
    'text_length',
    'text_range',
    'text_find',
    'text_replace',
    'contains',
    'page',
    'slide',
    'basic_slide',
    'title_slide',
    'title',
    'subtitle',
    'fade_in',
    'fade_out',
    'fade_at',
    'clear_color',
    'color',
    'line_color',
    'line_width',
    'texture_wrap',
    'texture_transform',
    'texture',
    'scale_?x',
    'scale_?y',
    'scale_?z?',
    'translate_?x',
    'translate_?y',
    'translate_?z?',
    'rotate_?x',
    'rotate_?y',
    'rotate_?z?',
    'rectangle',
    'circle',
    'ellipse',
    'sphere',
    'path',
    'line_to',
    'move_to',
    'quad_to',
    'curve_to',
    'theme',
    'background',
    'contents',
    'locally',
    'time',
    'mouse_?x',
    'mouse_?y',
    'mouse_buttons',
    'ObjectLoader',
    'Animate',
    'MovieCredits',
    'Slides',
    'Filters',
    'Shading',
    'Materials',
    'LensFlare',
    'Mapping',
    'VLCAudioVideo',
    'StereoDecoder',
    'PointCloud',
    'NetworkAccess',
    'RemoteControl',
    'RegExp',
    'ChromaKey',
    'Snowfall',
    'NodeJS',
    'Speech',
    'Charts',
]

keyword = [
    'if',
    'then',
    'else',
    'do',
    'while',
    'until',
    'for',
    'loop',
    'import',
    'with',
    'is',
    'as',
    'where',
    'when',
    'by',
    'data',
    'constant',
    'integer',
    'real',
    'text',
    'name',
    'boolean',
    'symbol',
    'infix',
    'prefix',
    'postfix',
    'block',
    'tree',
]

literal = ['true', 'false', 'nil']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

class title:
    default_text = DELIMITER
    rules = [('title', RE(r"[a-zA-Z]\w*"), [RE(r"\B|\b")])]

class _group0:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
    ]

class function:
    default_text = DELIMITER
    rules = [('title', title, [RE(r"(?=->)")], _group0)]

class _group1:
    default_text = DELIMITER
    rules = [
        ('built_in', built_in),
        ('keyword', keyword),
        ('literal', literal),
        None,  # rules[5],
    ]

number = [RE(r"[0-9]+#[0-9A-Z_]+(\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?")]

number0 = [RE(r"\b\d+(\.\d+)?")]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment0),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('string', RE(r"'"), [RE(r"'")]),
    ('string', RE(r"<<"), [RE(r">>")]),
    ('function', RE(r"(?=[a-z][^\n]*->)"), [RE(r"->")], function),
    ('_group1', RE(r"\b(import)"), [RE(r"$")], _group1),
    ('number', number),
    ('number', number0),
]

_group1.rules[3] = rules[5]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
