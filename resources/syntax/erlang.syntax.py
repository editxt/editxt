# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: erlang.js
name = 'Erlang'
file_patterns = ['*.erlang', '*.erl']

keyword = [
    'after',
    'and',
    'andalso',
    'band',
    'begin',
    'bnot',
    'bor',
    'bsl',
    'bzr',
    'bxor',
    'case',
    'catch',
    'cond',
    'div',
    'end',
    'fun',
    'if',
    'let',
    'not',
    'of',
    'orelse',
    'query',
    'receive',
    'rem',
    'try',
    'when',
    'xor',
]

literal = ['false', 'true']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class _group4:
    default_text = DELIMITER
    rules = []

class _group2:
    default_text = DELIMITER
    rules = [('_group4', RE(r"\("), [RE(r"(?=\))")], _group4)]

class string:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
    ]

number = [RE(r"\b(\d+#[a-fA-F0-9]+|\d+(\.\d+)?([eE][-+]?\d+)?)")]

class _group5:
    default_text = DELIMITER
    rules = []

class _group10:
    default_text = DELIMITER
    rules = []

class _group8:
    default_text = DELIMITER
    rules = [('_group10', RE(r"{"), [RE(r"}")], _group10)]

class _group0:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword),
        ('literal', literal),
        None,  # params.rules[0],
        # {'begin': "fun\\s+[a-z'][a-zA-Z0-9_']*/\\d+"},
        ('', RE(r"'"), [RE(r"'")]),
        # {'beginKeywords': 'fun receive if try case', 'end': 'end'},
        ('_group2', RE(r"(?=([a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*|[a-z'][a-zA-Z0-9_']*)\()"), [RE(r"\)")], _group2),
        ('string', RE(r"\""), [RE(r"\"")], string),
        ('number', number),
        ('_group5', RE(r"{"), [RE(r"}")], _group5),
        ('_group8', RE(r"(?=#[a-zA-Z_]\w*)"), [RE(r"\B|\b")], _group8),
    ]

class params:
    default_text = DELIMITER
    rules = [
        ('comment', RE(r"%"), [RE(r"$")], comment),
        ('_group0', RE(r"\b(fun|receive|if|try|case)"), [RE(r"end")], _group0),
        None,  # _group0.rules[4],
        None,  # _group0.rules[5],
        None,  # ('number', number),
        None,  # _group0.rules[7],
        # {'relevance': 0, 'begin': '\\b_([A-Z][A-Za-z0-9_]*)?'},
        # {'relevance': 0, 'begin': '[A-Z][a-zA-Z0-9_]*'},
        None,  # _group0.rules[8],
    ]

title = [RE(r"[a-z'][a-zA-Z0-9_']*")]

class function:
    default_text = DELIMITER
    rules = [('params', RE(r"\("), [RE(r"\)")], params), ('title', title)]

class function0:
    default_text = DELIMITER
    rules = [
        ('function', RE(r"(?=^[a-z'][a-zA-Z0-9_']*\s*\()"), [RE(r"->")], function),
    ]
function0.__name__ = 'function'

class _group11:
    default_text = DELIMITER
    rules = [('keyword', keyword), ('literal', literal)]

keyword0 = [
    '-module',
    '-record',
    '-undef',
    '-export',
    '-ifdef',
    '-ifndef',
    '-author',
    '-copyright',
    '-doc',
    '-vsn',
    '-import',
    '-include',
    '-include_lib',
    '-compile',
    '-define',
    '-else',
    '-endif',
    '-file',
    '-behaviour',
    '-behavior',
    '-spec',
]

class _group12:
    default_text = DELIMITER
    rules = [
        ('keyword', keyword0),
        None,  # function.rules[0],
    ]

rules = [
    ('keyword', keyword),
    ('literal', literal),
    ('function', function0, [RE(r";|\.")], _group11),
    None,  # params.rules[0],
    ('_group12', RE(r"(?=^-)"), [RE(r"(?=\.)")], _group12),
    None,  # ('number', number),
    None,  # _group0.rules[5],
    None,  # _group0.rules[8],
    # {'relevance': 0, 'begin': '\\b_([A-Z][A-Za-z0-9_]*)?'},
    # {'relevance': 0, 'begin': '[A-Z][a-zA-Z0-9_]*'},
    None,  # _group0.rules[7],
]

_group0.rules[2] = params.rules[0]
params.rules[2] = _group0.rules[4]
params.rules[3] = _group0.rules[5]
params.rules[4] = ('number', number)
params.rules[5] = _group0.rules[7]
params.rules[6] = _group0.rules[8]
rules[3] = params.rules[0]
_group12.rules[1] = function.rules[0]
rules[5] = ('number', number)
rules[6] = _group0.rules[5]
rules[7] = _group0.rules[8]
rules[8] = _group0.rules[7]
_group4.rules.extend(params.rules)
_group5.rules.extend(params.rules)
_group10.rules.extend(params.rules)
_group11.rules.extend(params.rules)

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
