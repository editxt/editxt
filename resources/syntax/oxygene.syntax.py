# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: oxygene.js
name = 'Oxygene'
file_patterns = ['*.oxygene']

flags = re.IGNORECASE | re.MULTILINE

keyword = [
    'abstract',
    'add',
    'and',
    'array',
    'as',
    'asc',
    'aspect',
    'assembly',
    'async',
    'begin',
    'break',
    'block',
    'by',
    'case',
    'class',
    'concat',
    'const',
    'copy',
    'constructor',
    'continue',
    'create',
    'default',
    'delegate',
    'desc',
    'distinct',
    'div',
    'do',
    'downto',
    'dynamic',
    'each',
    'else',
    'empty',
    'end',
    'ensure',
    'enum',
    'equals',
    'event',
    'except',
    'exit',
    'extension',
    'external',
    'false',
    'final',
    'finalize',
    'finalizer',
    'finally',
    'flags',
    'for',
    'forward',
    'from',
    'function',
    'future',
    'global',
    'group',
    'has',
    'if',
    'implementation',
    'implements',
    'implies',
    'in',
    'index',
    'inherited',
    'inline',
    'interface',
    'into',
    'invariants',
    'is',
    'iterator',
    'join',
    'locked',
    'locking',
    'loop',
    'matching',
    'method',
    'mod',
    'module',
    'namespace',
    'nested',
    'new',
    'nil',
    'not',
    'notify',
    'nullable',
    'of',
    'old',
    'on',
    'operator',
    'or',
    'order',
    'out',
    'override',
    'parallel',
    'params',
    'partial',
    'pinned',
    'private',
    'procedure',
    'property',
    'protected',
    'public',
    'queryable',
    'raise',
    'read',
    'readonly',
    'record',
    'reintroduce',
    'remove',
    'repeat',
    'require',
    'result',
    'reverse',
    'sealed',
    'select',
    'self',
    'sequence',
    'set',
    'shl',
    'shr',
    'skip',
    'static',
    'step',
    'soft',
    'take',
    'then',
    'to',
    'true',
    'try',
    'tuple',
    'type',
    'union',
    'unit',
    'unsafe',
    'until',
    'uses',
    'using',
    'var',
    'virtual',
    'raises',
    'volatile',
    'where',
    'while',
    'with',
    'write',
    'xor',
    'yield',
    'await',
    'mapped',
    'deprecated',
    'stdcall',
    'cdecl',
    'pascal',
    'register',
    'safecall',
    'overload',
    'library',
    'platform',
    'reference',
    'packed',
    'strict',
    'published',
    'autoreleasepool',
    'selector',
    'strong',
    'weak',
    'unretained',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

string = [RE(r"(#\d+)+")]

number = [RE(r"\b\d+(\.\d+)?")]

keyword0 = ['function', 'constructor', 'destructor', 'procedure', 'method']

title = [RE(r"[a-zA-Z]\w*")]

class params:
    default_text = DELIMITER
    word_groups = [('keyword', keyword), ('string', string)]
    delimited_ranges = [('string', RE(r"'"), [RE(r"'")])]

class function:
    default_text = DELIMITER
    word_groups = [('keyword', keyword0), ('title', title)]
    delimited_ranges = [
        ('params', RE(r"\("), [RE(r"\)")], params),
        ('comment', RE(r"{"), [RE(r"}")], comment),
        ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment),
    ]

class class0:
    default_text = DELIMITER
    word_groups = [('keyword', keyword), ('string', string)]
    delimited_ranges = [
        ('string', RE(r"'"), [RE(r"'")]),
        ('comment', RE(r"{"), [RE(r"}")], comment),
        ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment),
        ('comment', RE(r"//"), [RE(r"$")], comment),
        ('function', RE(r"\b(function|constructor|destructor|procedure|method)"), [RE(r"[:;]")], function),
    ]
class0.__name__ = 'class'

word_groups = [('keyword', keyword), ('string', string), ('number', number)]

delimited_ranges = [
    ('comment', RE(r"{"), [RE(r"}")], comment),
    ('comment', RE(r"\(\*"), [RE(r"\*\)")], comment),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('string', RE(r"'"), [RE(r"'")]),
    ('function', RE(r"\b(function|constructor|destructor|procedure|method)"), [RE(r"[:;]")], function),
    ('class', RE(r"=\bclass\b"), [RE(r"end;")], class0),
]
