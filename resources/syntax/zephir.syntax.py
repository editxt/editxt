# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: zephir.js
name = 'Zephir'
file_patterns = ['*.zephir', '*.zep']

flags = re.IGNORECASE | re.MULTILINE

keyword = """
    and include_once list abstract global private echo interface as
    static endswitch array null if endwhile or const for endforeach self
    var let while isset public protected exit foreach throw elseif
    include __FILE__ empty require_once do xor return parent clone use
    __CLASS__ __LINE__ else break print eval new catch __METHOD__ case
    exception default die require __FUNCTION__ enddeclare final try
    switch continue endfor endif declare unset true false trait goto
    instanceof insteadof __DIR__ __NAMESPACE__ yield finally int uint
    long ulong char uchar double float bool boolean stringlikely
    unlikely
    """.split()

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]

class comment2:
    default_text_color = DELIMITER
    rules = [
        ('doctag', [RE(r"@[A-Za-z]+")]),
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]
comment2.__name__ = 'comment'

class comment4:
    default_text_color = DELIMITER
    ends_with_parent = True
    rules = [
        ('keyword', ['__halt_compiler']),
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]),
    ]
comment4.__name__ = 'comment'

operator_escape = ('operator.escape', [RE(r"\\[\s\S]")])

class string:
    default_text_color = DELIMITER
    rules = [operator_escape]

class _function0:
    default_text_color = DELIMITER
    rules = [('_function', [RE(r"[;{]")])]
_function0.__name__ = '_function'

title = ('title', [RE(r"[a-zA-Z_]\w*")])

string2 = ('string', RE(r"b\""), [RE(r"\"")], string)

string3 = ('string', RE(r"b'"), [RE(r"'")], string)

string4 = ('string', RE(r"'"), [RE(r"'")], string)

string5 = ('string', RE(r"\""), [RE(r"\"")], string)

number = ('number', [RE(r"\b(?:0b[01]+)")])

number0 = [
    RE(r"(?:\b0[xX][a-fA-F0-9]+|(?:\b\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?)"),
]

number1 = ('number', number0)

class params:
    default_text_color = DELIMITER
    rules = [
        ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
        string2,
        string3,
        string4,
        string5,
        number,
        number1,
    ]

class function:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['function']),
        title,
        ('params', RE(r"\("), [RE(r"\)")], params),
    ]

class _class0:
    default_text_color = DELIMITER
    rules = [('_class', [RE(r"{")])]
_class0.__name__ = '_class'

class class0:
    default_text_color = DELIMITER
    rules = [
        ('keyword', ['class', 'interface']),
        ('_group2', RE(r"\b(?:extends|implements)"), [RE(r"(?={)")]),
        title,
    ]
class0.__name__ = 'class'

class _group3:
    default_text_color = DELIMITER
    rules = [('keyword', ['namespace']), title]

class _group4:
    default_text_color = DELIMITER
    rules = [('keyword', ['use']), title]

rules = [
    ('keyword', keyword),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"#"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment2),
    ('comment', RE(r"__halt_compiler.+?;"), [RE(r"\B|\b")], comment4),
    ('string', RE(r"<<<['\"]?\w+['\"]?$"), [RE(r"^\w+;")], string),
    # ignore {'begin': {'pattern': '(::|->)+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*', 'type': 'RegExp'}},
    ('function', RE(r"\b(?:function)"), [_function0], function),
    ('class', RE(r"\b(?:class|interface)"), [_class0], class0),
    ('_group3', RE(r"\b(?:namespace)"), [RE(r";")], _group3),
    ('_group4', RE(r"\b(?:use)"), [RE(r";")], _group4),
    # ignore {'begin': '=>'},
    string2,
    string3,
    string4,
    string5,
    number,
    number1,
]
