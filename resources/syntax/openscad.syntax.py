# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: openscad.js
name = 'OpenSCAD'
file_patterns = ['*.openscad', '*.scad']

built_in = """
    circle square polygon text sphere cube cylinder polyhedron translate
    rotate scale resize mirror multmatrix color offset hull minkowski
    union difference intersection abs sign sin cos tan acos asin atan
    atan2 floor round ceil ln log pow sqrt exp rands min max concat
    lookup str chr search version version_num norm cross parent_module
    echo import import_dxf dxf_linear_extrude linear_extrude
    rotate_extrude surface projection render children dxf_cross dxf_dim
    let assign
    """.split()

keyword = """
    function module include use for intersection_for if else \%
    """.split()

literal = ['false', 'true', 'PI', 'undef']

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': {'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b", 'type': 'RegExp'}},
        ('doctag', doctag),
    ]

number = [RE(r"\b\d+(?:\.\d+)?(?:e-?\d+)?")]

meta_keyword = ['include', 'use']

class meta:
    default_text_color = DELIMITER
    rules = [('meta-keyword', meta_keyword)]

class string:
    default_text_color = DELIMITER
    rules = [
        # ignore {'begin': '\\\\[\\s\\S]', 'relevance': 0},
    ]

keyword0 = [RE(r"\$(?:f[asn]|t|vp[rtd]|children)")]

keyword1 = ['module', 'function']

literal0 = [RE(r"false|true|PI|undef")]

class params:
    default_text_color = DELIMITER
    rules = [
        ('number', number),
        None,  # rules[7],
        ('keyword', keyword0),
        ('literal', literal0),
    ]

title = [RE(r"[a-zA-Z_]\w*")]

class function:
    default_text_color = DELIMITER
    rules = [
        ('keyword', keyword1),
        ('params', RE(r"\("), [RE(r"\)")], params),
        ('title', title),
    ]

rules = [
    ('built_in', built_in),
    ('keyword', keyword),
    ('literal', literal),
    ('comment', RE(r"//"), [RE(r"$")], comment),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('number', number),
    ('meta', RE(r"include|use <"), [RE(r">")], meta),
    ('string', RE(r"\""), [RE(r"\"")], string),
    ('keyword', keyword0),
    # ignore {'begin': '[*!#%]', 'relevance': 0},
    ('function', RE(r"\b(?:module|function)"), [RE(r"\=|\{")], function),
]

params.rules[1] = rules[7]
