# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: scheme.js
name = 'Scheme'
file_patterns = ['*.scheme']

number = [RE(r"(\-|\+)?\d+([./]\d+)?")]

number0 = [RE(r"(\-|\+)?\d+([./]\d+)?[+\-](\-|\+)?\d+([./]\d+)?i")]

number1 = [RE(r"#b[0-1]+(/[0-1]+)?")]

number2 = [RE(r"#o[0-7]+(/[0-7]+)?")]

number3 = [RE(r"#x[0-9a-f]+(/[0-9a-f]+)?")]

symbol = [RE(r"'[^\(\)\[\]\{\}\",'`;#|\\\s]+")]

built_in = [
    'case-lambda',
    'call/cc',
    'class',
    'define-class',
    'exit-handler',
    'field',
    'import',
    'inherit',
    'init-field',
    'interface',
    'let*-values',
    'let-values',
    'let/ec',
    'mixin',
    'opt-lambda',
    'override',
    'protect',
    'provide',
    'public',
    'rename',
    'require',
    'require-for-syntax',
    'syntax',
    'syntax-case',
    'syntax-error',
    'unit/sig',
    'unless',
    'when',
    'with-syntax',
    'and',
    'begin',
    'call-with-current-continuation',
    'call-with-input-file',
    'call-with-output-file',
    'case',
    'cond',
    'define',
    'define-syntax',
    'delay',
    'do',
    'dynamic-wind',
    'else',
    'for-each',
    'if',
    'lambda',
    'let',
    'let*',
    'let-syntax',
    'letrec',
    'letrec-syntax',
    'map',
    'or',
    'syntax-rules',
    "'",
    '*',
    '+',
    ',',
    ',@',
    '-',
    '...',
    '/',
    ';',
    '<',
    '<=',
    '=',
    '=>',
    '>',
    '>=',
    '`',
    'abs',
    'acos',
    'angle',
    'append',
    'apply',
    'asin',
    'assoc',
    'assq',
    'assv',
    'atan',
    'boolean?',
    'caar',
    'cadr',
    'call-with-input-file',
    'call-with-output-file',
    'call-with-values',
    'car',
    'cdddar',
    'cddddr',
    'cdr',
    'ceiling',
    'char->integer',
    'char-alphabetic?',
    'char-ci<=?',
    'char-ci<?',
    'char-ci=?',
    'char-ci>=?',
    'char-ci>?',
    'char-downcase',
    'char-lower-case?',
    'char-numeric?',
    'char-ready?',
    'char-upcase',
    'char-upper-case?',
    'char-whitespace?',
    'char<=?',
    'char<?',
    'char=?',
    'char>=?',
    'char>?',
    'char?',
    'close-input-port',
    'close-output-port',
    'complex?',
    'cons',
    'cos',
    'current-input-port',
    'current-output-port',
    'denominator',
    'display',
    'eof-object?',
    'eq?',
    'equal?',
    'eqv?',
    'eval',
    'even?',
    'exact->inexact',
    'exact?',
    'exp',
    'expt',
    'floor',
    'force',
    'gcd',
    'imag-part',
    'inexact->exact',
    'inexact?',
    'input-port?',
    'integer->char',
    'integer?',
    'interaction-environment',
    'lcm',
    'length',
    'list',
    'list->string',
    'list->vector',
    'list-ref',
    'list-tail',
    'list?',
    'load',
    'log',
    'magnitude',
    'make-polar',
    'make-rectangular',
    'make-string',
    'make-vector',
    'max',
    'member',
    'memq',
    'memv',
    'min',
    'modulo',
    'negative?',
    'newline',
    'not',
    'null-environment',
    'null?',
    'number->string',
    'number?',
    'numerator',
    'odd?',
    'open-input-file',
    'open-output-file',
    'output-port?',
    'pair?',
    'peek-char',
    'port?',
    'positive?',
    'procedure?',
    'quasiquote',
    'quote',
    'quotient',
    'rational?',
    'rationalize',
    'read',
    'read-char',
    'real-part',
    'real?',
    'remainder',
    'reverse',
    'round',
    'scheme-report-environment',
    'set!',
    'set-car!',
    'set-cdr!',
    'sin',
    'sqrt',
    'string',
    'string->list',
    'string->number',
    'string->symbol',
    'string-append',
    'string-ci<=?',
    'string-ci<?',
    'string-ci=?',
    'string-ci>=?',
    'string-ci>?',
    'string-copy',
    'string-fill!',
    'string-length',
    'string-ref',
    'string-set!',
    'string<=?',
    'string<?',
    'string=?',
    'string>=?',
    'string>?',
    'string?',
    'substring',
    'symbol->string',
    'symbol?',
    'tan',
    'transcript-off',
    'transcript-on',
    'truncate',
    'values',
    'vector',
    'vector->list',
    'vector-fill!',
    'vector-length',
    'vector-ref',
    'vector-set!',
    'with-input-from-file',
    'with-output-to-file',
    'write',
    'write-char',
    'zero?',
]

class name0:
    default_text = DELIMITER
    word_groups = [('built_in', built_in)]
name0.__name__ = 'name'

literal = [RE(r"(#t|#f|#\\[^\(\)\[\]\{\}\",'`;#|\\\s]+|#\\.)")]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    word_groups = [('doctag', doctag)]

class _group2:
    default_text = DELIMITER
    word_groups = [
        ('literal', literal),
        ('number', number),
        ('number', number0),
        ('number', number1),
        ('number', number2),
        ('number', number3),
        ('symbol', symbol),
    ]
    delimited_ranges = [
        ('string', RE(r"\""), [RE(r"\"")]),
        ('_group5', RE(r"\("), [RE(r"\)")]),
        ('_group6', RE(r"\["), [RE(r"\]")]),
        ('comment', RE(r";"), [RE(r"$")], comment),
        ('comment', RE(r"#\|"), [RE(r"\|#")], comment),
    ]

class _group1:
    default_text = DELIMITER
    delimited_ranges = [
        ('name', RE(r"[^\(\)\[\]\{\}\",'`;#|\\\s]+"), [RE(r"\B|\b")], name0),
        ('_group2', RE(r"\B|\b"), [RE(r"")], _group2),
    ]

class _group10:
    default_text = DELIMITER
    word_groups = [
        ('literal', literal),
        ('number', number),
        ('number', number0),
        ('number', number1),
        ('number', number2),
        ('number', number3),
        ('symbol', symbol),
    ]
    delimited_ranges = [
        ('string', RE(r"\""), [RE(r"\"")]),
        ('_group13', RE(r"\("), [RE(r"\)")]),
        ('_group14', RE(r"\["), [RE(r"\]")]),
        ('comment', RE(r";"), [RE(r"$")], comment),
        ('comment', RE(r"#\|"), [RE(r"\|#")], comment),
    ]

class _group9:
    default_text = DELIMITER
    delimited_ranges = [
        ('name', RE(r"[^\(\)\[\]\{\}\",'`;#|\\\s]+"), [RE(r"\B|\b")], name0),
        ('_group10', RE(r"\B|\b"), [RE(r"")], _group10),
    ]

word_groups = [
    ('number', number),
    ('number', number0),
    ('number', number1),
    ('number', number2),
    ('number', number3),
    ('symbol', symbol),
]

delimited_ranges = [
    ('meta', RE(r"^#!"), [RE(r"$")]),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('_group1', RE(r"\("), [RE(r"\)")], _group1),
    ('_group9', RE(r"\["), [RE(r"\]")], _group9),
    ('comment', RE(r";"), [RE(r"$")], comment),
    ('comment', RE(r"#\|"), [RE(r"\|#")], comment),
]
