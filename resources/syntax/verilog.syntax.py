# -*- coding: UTF-8 -*-
# Syntax definition automatically generated by hljs2xt.py
# source: verilog.js
name = 'Verilog'
file_patterns = ['*.verilog', '*.v']

flags = re.IGNORECASE | re.MULTILINE

keyword = [
    'always',
    'and',
    'assign',
    'begin',
    'buf',
    'bufif0',
    'bufif1',
    'case',
    'casex',
    'casez',
    'cmos',
    'deassign',
    'default',
    'defparam',
    'disable',
    'edge',
    'else',
    'end',
    'endcase',
    'endfunction',
    'endmodule',
    'endprimitive',
    'endspecify',
    'endtable',
    'endtask',
    'event',
    'for',
    'force',
    'forever',
    'fork',
    'function',
    'if',
    'ifnone',
    'initial',
    'inout',
    'input',
    'join',
    'macromodule',
    'module',
    'nand',
    'negedge',
    'nmos',
    'nor',
    'not',
    'notif0',
    'notif1',
    'or',
    'output',
    'parameter',
    'pmos',
    'posedge',
    'primitive',
    'pulldown',
    'pullup',
    'rcmos',
    'release',
    'repeat',
    'rnmos',
    'rpmos',
    'rtran',
    'rtranif0',
    'rtranif1',
    'specify',
    'specparam',
    'table',
    'task',
    'timescale',
    'tran',
    'tranif0',
    'tranif1',
    'wait',
    'while',
    'xnor',
    'xor',
    'highz0',
    'highz1',
    'integer',
    'large',
    'medium',
    'pull0',
    'pull1',
    'real',
    'realtime',
    'reg',
    'scalared',
    'signed',
    'small',
    'strong0',
    'strong1',
    'supply0',
    'supply0',
    'supply1',
    'supply1',
    'time',
    'tri',
    'tri0',
    'tri1',
    'triand',
    'trior',
    'trireg',
    'vectored',
    'wand',
    'weak0',
    'weak1',
    'wire',
    'wor',
]

doctag = [RE(r"(?:TODO|FIXME|NOTE|BUG|XXX):")]

class comment:
    default_text = DELIMITER
    rules = [('doctag', doctag)]

class comment0:
    default_text = DELIMITER
    rules = [
        # {'begin': {'type': 'RegExp', 'pattern': "\\b(a|an|the|are|I|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\\b"}},
        ('doctag', doctag),
    ]
comment0.__name__ = 'comment'

class number:
    default_text = DELIMITER
    rules = [
        # {'relevance': 0, 'begin': '\\\\[\\s\\S]'},
    ]

variable = [RE(r"#\((?!parameter).+\)")]

rules = [
    ('keyword', keyword),
    ('comment', RE(r"/\*"), [RE(r"\*/")], comment),
    ('comment', RE(r"//"), [RE(r"$")], comment0),
    ('string', RE(r"\""), [RE(r"\"")]),
    ('number', RE(r"\b(\d+'(b|h|o|d|B|H|O|D))?[0-9xzXZ]+"), [RE(r"\B|\b")], number),
    ('variable', variable),
]

# TODO merge "word_groups" and "delimited_ranges" into "rules" in editxt.syntax
assert "__obj" not in globals()
assert "__fixup" not in globals()
def __fixup(obj):
    groups = []
    ranges = []
    rules = getattr(obj, "rules", [])
    for i, rng in reversed(list(enumerate(rules))):
        if len(rng) == 2:
            groups.append(rng)
        else:
            assert len(rng) > 2, rng
            ranges.append(rng)
    return groups, ranges

class __obj:
    rules = globals().get("rules", [])
word_groups, delimited_ranges = __fixup(__obj)

for __obj in globals().values():
    if hasattr(__obj, "rules"):
        __obj.word_groups, __obj.delimited_ranges = __fixup(__obj)

del __obj, __fixup
